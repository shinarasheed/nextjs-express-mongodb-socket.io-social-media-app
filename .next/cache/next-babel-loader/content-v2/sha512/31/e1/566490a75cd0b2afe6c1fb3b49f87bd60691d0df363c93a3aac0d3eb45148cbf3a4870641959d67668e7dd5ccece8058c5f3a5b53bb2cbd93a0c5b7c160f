{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\REACT\\\\mernChat\\\\pages\\\\messages.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport baseUrl from '../utils/baseUrl';\nimport { parseCookies } from 'nookies';\nimport { useRouter } from 'next/router';\nimport { Segment, Header, Divider, Comment, Grid } from 'semantic-ui-react';\nimport Chat from '../components/Chats/Chat';\nimport ChatListSearch from '../components/Chats/ChatListSearch';\nimport { NoMessages } from '../components/Layout/NoData';\n\nfunction Messages({\n  chatsData\n}) {\n  const {\n    0: chats,\n    1: setChats\n  } = useState(chatsData);\n  const router = useRouter();\n  const socket = useRef(); // useEffect(() => {}, []);\n\n  useEffect(() => {\n    //connect to the server\n    if (socket.current) {\n      socket.current = io(baseUrl);\n    } //if the socket is connected\n\n\n    if (socket.current) {\n      socket.current.emit('helloword', {\n        name: 'shina',\n        age: '32'\n      });\n    }\n\n    if (chats.length > 0 && !router.query.message) router.push(`/messages?message=${chats[0].messagesWith}`, undefined, {\n      shallow: true\n    });\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(Segment, {\n    padded: true,\n    basic: true,\n    size: \"large\",\n    style: {\n      marginTop: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, __jsx(Header, {\n    icon: \"home\",\n    content: \"Go Back!\",\n    onClick: () => router.push('/'),\n    style: {\n      cursor: 'pointer'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }), __jsx(Divider, {\n    hidden: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    style: {\n      marginBottom: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, __jsx(ChatListSearch, {\n    chats: chats,\n    setChats: setChats,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  })), chats.length > 0 ? __jsx(React.Fragment, null, __jsx(Grid, {\n    stackable: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, __jsx(Grid.Column, {\n    width: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 15\n    }\n  }, __jsx(Comment.Group, {\n    size: \"big\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }, __jsx(Segment, {\n    raised: true,\n    style: {\n      overflow: 'auto',\n      maxHeight: '32rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 19\n    }\n  }, chats.map((chat, i) => __jsx(Chat, {\n    key: i,\n    chat: chat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 23\n    }\n  }))))))) : __jsx(NoMessages, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  })));\n}\n\nMessages.getInitialProps = async ctx => {\n  try {\n    const {\n      token\n    } = parseCookies(ctx);\n    const res = await axios.get(`${baseUrl}/api/chats`, {\n      headers: {\n        Authorization: token\n      }\n    });\n    return {\n      chatsData: res.data\n    };\n  } catch (error) {\n    return {\n      errorLoading: true\n    };\n  }\n};\n\nexport default Messages;","map":{"version":3,"sources":["C:/Users/User/Desktop/REACT/mernChat/pages/messages.js"],"names":["React","useEffect","useRef","useState","io","axios","baseUrl","parseCookies","useRouter","Segment","Header","Divider","Comment","Grid","Chat","ChatListSearch","NoMessages","Messages","chatsData","chats","setChats","router","socket","current","emit","name","age","length","query","message","push","messagesWith","undefined","shallow","marginTop","cursor","marginBottom","overflow","maxHeight","map","chat","i","getInitialProps","ctx","token","res","get","headers","Authorization","data","error","errorLoading"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport io from 'socket.io-client';\r\nimport axios from 'axios';\r\nimport baseUrl from '../utils/baseUrl';\r\nimport { parseCookies } from 'nookies';\r\nimport { useRouter } from 'next/router';\r\nimport { Segment, Header, Divider, Comment, Grid } from 'semantic-ui-react';\r\nimport Chat from '../components/Chats/Chat';\r\nimport ChatListSearch from '../components/Chats/ChatListSearch';\r\nimport { NoMessages } from '../components/Layout/NoData';\r\n\r\nfunction Messages({ chatsData }) {\r\n  const [chats, setChats] = useState(chatsData);\r\n  const router = useRouter();\r\n\r\n  const socket = useRef();\r\n\r\n  // useEffect(() => {}, []);\r\n\r\n  useEffect(() => {\r\n    //connect to the server\r\n    if (socket.current) {\r\n      socket.current = io(baseUrl);\r\n    }\r\n\r\n    //if the socket is connected\r\n    if (socket.current) {\r\n      socket.current.emit('helloword', { name: 'shina', age: '32' });\r\n    }\r\n\r\n    if (chats.length > 0 && !router.query.message)\r\n      router.push(`/messages?message=${chats[0].messagesWith}`, undefined, {\r\n        shallow: true,\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Segment padded basic size=\"large\" style={{ marginTop: '5px' }}>\r\n        <Header\r\n          icon=\"home\"\r\n          content=\"Go Back!\"\r\n          onClick={() => router.push('/')}\r\n          style={{ cursor: 'pointer' }}\r\n        />\r\n        <Divider hidden />\r\n\r\n        <div style={{ marginBottom: '10px' }}>\r\n          <ChatListSearch chats={chats} setChats={setChats} />\r\n        </div>\r\n\r\n        {chats.length > 0 ? (\r\n          <>\r\n            <Grid stackable>\r\n              <Grid.Column width={4}>\r\n                <Comment.Group size=\"big\">\r\n                  <Segment\r\n                    raised\r\n                    style={{ overflow: 'auto', maxHeight: '32rem' }}\r\n                  >\r\n                    {chats.map((chat, i) => (\r\n                      <Chat key={i} chat={chat} />\r\n                    ))}\r\n                  </Segment>\r\n                </Comment.Group>\r\n              </Grid.Column>\r\n            </Grid>\r\n          </>\r\n        ) : (\r\n          <NoMessages />\r\n        )}\r\n      </Segment>\r\n    </>\r\n  );\r\n}\r\n\r\nMessages.getInitialProps = async (ctx) => {\r\n  try {\r\n    const { token } = parseCookies(ctx);\r\n\r\n    const res = await axios.get(`${baseUrl}/api/chats`, {\r\n      headers: { Authorization: token },\r\n    });\r\n\r\n    return { chatsData: res.data };\r\n  } catch (error) {\r\n    return { errorLoading: true };\r\n  }\r\n};\r\n\r\nexport default Messages;\r\n"]},"metadata":{},"sourceType":"module"}