{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\REACT\\\\mernChat\\\\pages\\\\post\\\\[postId].js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { parseCookies } from 'nookies';\nimport { Card, Icon, Image, Divider, Segment, Container } from 'semantic-ui-react';\nimport PostComments from '../../components/Post/PostComments';\nimport CommentInputField from '../../components/Post/CommentInputField';\nimport LikesList from '../../components/Post/LikesList';\nimport Link from 'next/link';\nimport { likePost } from '../../utils/postActions';\nimport calculateTime from '../../utils/calculateTime';\nimport baseUrl from '../../utils/baseUrl';\nimport { NoPostFound } from '../../components/Layout/NoData';\n\nfunction PostPage({\n  post,\n  errorLoading,\n  user\n}) {\n  if (errorLoading) {\n    return __jsx(NoPostFound, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 12\n      }\n    });\n  }\n\n  const {\n    0: likes,\n    1: setLikes\n  } = useState(post.likes);\n  const isLiked = likes.length > 0 && likes.filter(like => like.user === user._id).length > 0;\n  const {\n    0: comments,\n    1: setComments\n  } = useState(post.comments);\n  return __jsx(Container, {\n    text: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, __jsx(Segment, {\n    basic: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, __jsx(Card, {\n    color: \"teal\",\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, post.picUrl && __jsx(Image, {\n    src: post.picUrl,\n    style: {\n      cursor: 'pointer'\n    },\n    floated: \"left\",\n    wrapped: true,\n    ui: false,\n    alt: \"PostImage\",\n    onClick: () => setShowModal(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }), __jsx(Card.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, __jsx(Image, {\n    floated: \"left\",\n    src: post.user.profilePicUrl,\n    avatar: true,\n    circular: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }), __jsx(Card.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, __jsx(Link, {\n    href: `/${post.user.username}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }, post.user.name))), __jsx(Card.Meta, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, calculateTime(post.createdAt)), post.location && __jsx(Card.Meta, {\n    content: post.location,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 31\n    }\n  }), __jsx(Card.Description, {\n    style: {\n      fontSize: '17px',\n      letterSpacing: '0.1px',\n      wordSpacing: '0.35px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, post.text)), __jsx(Card.Content, {\n    extra: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, __jsx(Icon, {\n    name: isLiked ? 'heart' : 'heart outline',\n    color: \"red\",\n    style: {\n      cursor: 'pointer'\n    },\n    onClick: () => likePost(post._id, user._id, setLikes, isLiked ? false : true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }), __jsx(LikesList, {\n    postId: post._id,\n    trigger: likes.length > 0 && __jsx(\"span\", {\n      className: \"spanLikesList\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 19\n      }\n    }, `${likes.length} ${likes.length === 1 ? 'like' : 'likes'}`),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }), __jsx(Icon, {\n    name: \"comment outline\",\n    style: {\n      marginLeft: '7px'\n    },\n    color: \"blue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }), comments.length > 0 && comments.map(comment => __jsx(PostComments, {\n    key: comment._id,\n    comment: comment,\n    postId: post._id,\n    user: user,\n    setComments: setComments,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  })), __jsx(Divider, {\n    hidden: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }), __jsx(CommentInputField, {\n    user: user,\n    postId: post._id,\n    setComments: setComments,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  })))), __jsx(Divider, {\n    hidden: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }));\n}\n\nPostPage.getInitialProps = async ctx => {\n  try {\n    const {\n      postId\n    } = ctx.query;\n    const {\n      token\n    } = parseCookies(ctx);\n    const res = await axios.get(`${baseUrl}/api/posts/${postId}`, {\n      headers: {\n        Authorization: token\n      }\n    });\n    return {\n      post: res.data\n    };\n  } catch (error) {\n    return {\n      errorLoading: true\n    };\n  }\n};\n\nexport default PostPage;","map":{"version":3,"sources":["C:/Users/User/Desktop/REACT/mernChat/pages/post/[postId].js"],"names":["React","useState","axios","parseCookies","Card","Icon","Image","Divider","Segment","Container","PostComments","CommentInputField","LikesList","Link","likePost","calculateTime","baseUrl","NoPostFound","PostPage","post","errorLoading","user","likes","setLikes","isLiked","length","filter","like","_id","comments","setComments","picUrl","cursor","setShowModal","profilePicUrl","username","name","createdAt","location","fontSize","letterSpacing","wordSpacing","text","marginLeft","map","comment","getInitialProps","ctx","postId","query","token","res","get","headers","Authorization","data","error"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { parseCookies } from 'nookies';\r\nimport {\r\n  Card,\r\n  Icon,\r\n  Image,\r\n  Divider,\r\n  Segment,\r\n  Container,\r\n} from 'semantic-ui-react';\r\nimport PostComments from '../../components/Post/PostComments';\r\nimport CommentInputField from '../../components/Post/CommentInputField';\r\nimport LikesList from '../../components/Post/LikesList';\r\nimport Link from 'next/link';\r\nimport { likePost } from '../../utils/postActions';\r\nimport calculateTime from '../../utils/calculateTime';\r\nimport baseUrl from '../../utils/baseUrl';\r\nimport { NoPostFound } from '../../components/Layout/NoData';\r\n\r\nfunction PostPage({ post, errorLoading, user }) {\r\n  if (errorLoading) {\r\n    return <NoPostFound />;\r\n  }\r\n\r\n  const [likes, setLikes] = useState(post.likes);\r\n\r\n  const isLiked =\r\n    likes.length > 0 &&\r\n    likes.filter((like) => like.user === user._id).length > 0;\r\n\r\n  const [comments, setComments] = useState(post.comments);\r\n\r\n  return (\r\n    <Container text>\r\n      <Segment basic>\r\n        <Card color=\"teal\" fluid>\r\n          {post.picUrl && (\r\n            <Image\r\n              src={post.picUrl}\r\n              style={{ cursor: 'pointer' }}\r\n              floated=\"left\"\r\n              wrapped\r\n              ui={false}\r\n              alt=\"PostImage\"\r\n              onClick={() => setShowModal(true)}\r\n            />\r\n          )}\r\n\r\n          <Card.Content>\r\n            <Image\r\n              floated=\"left\"\r\n              src={post.user.profilePicUrl}\r\n              avatar\r\n              circular\r\n            />\r\n            <Card.Header>\r\n              <Link href={`/${post.user.username}`}>\r\n                <a>{post.user.name}</a>\r\n              </Link>\r\n            </Card.Header>\r\n\r\n            <Card.Meta>{calculateTime(post.createdAt)}</Card.Meta>\r\n\r\n            {post.location && <Card.Meta content={post.location} />}\r\n\r\n            <Card.Description\r\n              style={{\r\n                fontSize: '17px',\r\n                letterSpacing: '0.1px',\r\n                wordSpacing: '0.35px',\r\n              }}\r\n            >\r\n              {post.text}\r\n            </Card.Description>\r\n          </Card.Content>\r\n\r\n          <Card.Content extra>\r\n            <Icon\r\n              name={isLiked ? 'heart' : 'heart outline'}\r\n              color=\"red\"\r\n              style={{ cursor: 'pointer' }}\r\n              onClick={() =>\r\n                likePost(post._id, user._id, setLikes, isLiked ? false : true)\r\n              }\r\n            />\r\n\r\n            <LikesList\r\n              postId={post._id}\r\n              trigger={\r\n                likes.length > 0 && (\r\n                  <span className=\"spanLikesList\">\r\n                    {`${likes.length} ${likes.length === 1 ? 'like' : 'likes'}`}\r\n                  </span>\r\n                )\r\n              }\r\n            />\r\n\r\n            <Icon\r\n              name=\"comment outline\"\r\n              style={{ marginLeft: '7px' }}\r\n              color=\"blue\"\r\n            />\r\n\r\n            {comments.length > 0 &&\r\n              comments.map((comment) => (\r\n                <PostComments\r\n                  key={comment._id}\r\n                  comment={comment}\r\n                  postId={post._id}\r\n                  user={user}\r\n                  setComments={setComments}\r\n                />\r\n              ))}\r\n\r\n            <Divider hidden />\r\n\r\n            <CommentInputField\r\n              user={user}\r\n              postId={post._id}\r\n              setComments={setComments}\r\n            />\r\n          </Card.Content>\r\n        </Card>\r\n      </Segment>\r\n      <Divider hidden />\r\n    </Container>\r\n  );\r\n}\r\n\r\nPostPage.getInitialProps = async (ctx) => {\r\n  try {\r\n    const { postId } = ctx.query;\r\n    const { token } = parseCookies(ctx);\r\n\r\n    const res = await axios.get(`${baseUrl}/api/posts/${postId}`, {\r\n      headers: { Authorization: token },\r\n    });\r\n\r\n    return { post: res.data };\r\n  } catch (error) {\r\n    return { errorLoading: true };\r\n  }\r\n};\r\n\r\nexport default PostPage;\r\n"]},"metadata":{},"sourceType":"module"}