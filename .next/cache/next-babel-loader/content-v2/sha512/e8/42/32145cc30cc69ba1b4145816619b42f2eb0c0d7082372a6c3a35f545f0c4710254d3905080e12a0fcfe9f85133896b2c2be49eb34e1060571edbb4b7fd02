{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\ADVANCED REACT\\\\mernChat\\\\components\\\\Profile\\\\Settings.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { List, Divider, Message, Checkbox, Form, Button } from 'semantic-ui-react';\nimport { passwordUpdate, toggleMessagePopup } from '../../utils/profileActions';\n\nfunction Settings({\n  newMessagePopup\n}) {\n  const {\n    0: passwordFields,\n    1: showPasswordFields\n  } = useState(false);\n  const {\n    0: popupSetting,\n    1: setPopupSetting\n  } = useState(newMessagePopup);\n  const {\n    0: success,\n    1: setSuccess\n  } = useState(false);\n  const {\n    0: newMessageSettings,\n    1: showNewMessageSettings\n  } = useState(false);\n  const isFirstRun = useRef(true);\n  useEffect(() => {\n    success && setTimeout(() => setSuccess(false), 3000);\n  }, [success]);\n  useEffect(() => {\n    if (isFirstRun.current) {\n      isFirstRun.current = false;\n      return;\n    }\n  }, [popupSetting]);\n  return __jsx(React.Fragment, null, success && __jsx(React.Fragment, null, __jsx(Message, {\n    success: true,\n    icon: \"check circle\",\n    header: \"Updated Successfully\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }), __jsx(Divider, {\n    hidden: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  })), __jsx(List, {\n    size: \"huge\",\n    animated: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, __jsx(List.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, __jsx(List.Icon, {\n    name: \"user secret\",\n    size: \"large\",\n    verticalAlign: \"middle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }), __jsx(List.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }, __jsx(List.Header, {\n    onClick: () => showPasswordFields(!passwordFields),\n    as: \"a\",\n    content: \"Update Password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  })), passwordFields && __jsx(UpdatePassword, {\n    setSuccess: setSuccess,\n    showPasswordFields: showPasswordFields,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  })), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }), __jsx(List.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, __jsx(List.Icon, {\n    name: \"paper plane outline\",\n    size: \"large\",\n    verticalAlign: \"middle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }), __jsx(List.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, __jsx(List.Header, {\n    onClick: () => showNewMessageSettings(!newMessageSettings),\n    as: \"a\",\n    content: \"Show New Message Popup?\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    style: {\n      marginTop: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, \"Control whether a Popup should appear when there is a New Message or not.\", __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }), __jsx(Checkbox, {\n    checked: popupSetting,\n    toggle: true,\n    onChange: () => toggleMessagePopup(popupSetting, setPopupSetting, setSuccess),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }))), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  })));\n}\n\nconst UpdatePassword = ({\n  setSuccess,\n  showPasswordFields\n}) => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: errorMsg,\n    1: setError\n  } = useState(null);\n  const {\n    0: userPasswords,\n    1: setUserPasswords\n  } = useState({\n    currentPassword: '',\n    newPassword: ''\n  });\n  const {\n    0: typed,\n    1: showTyped\n  } = useState({\n    field1: false,\n    field2: false\n  });\n  const {\n    field1,\n    field2\n  } = typed;\n  const {\n    currentPassword,\n    newPassword\n  } = userPasswords;\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setUserPasswords(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      [name]: value\n    }));\n  };\n\n  useEffect(() => {\n    errorMsg && setTimeout(() => setError(null), 5000);\n  }, [errorMsg]);\n  return __jsx(React.Fragment, null, __jsx(Form, {\n    error: errorMsg !== null,\n    loading: loading,\n    onSubmit: async e => {\n      e.preventDefault();\n      setLoading(true);\n      await passwordUpdate(setSuccess, userPasswords);\n      setLoading(false);\n      showPasswordFields(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, __jsx(List.List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, __jsx(List.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }, __jsx(Form.Input, {\n    fluid: true,\n    icon: {\n      name: 'eye',\n      circular: true,\n      link: true,\n      onClick: () => showTyped(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        field1: !field1\n      }))\n    },\n    type: field1 ? 'text' : 'password',\n    iconPosition: \"left\",\n    label: \"Current Password\",\n    placeholder: \"Enter current Password\",\n    name: \"currentPassword\",\n    onChange: handleChange,\n    value: currentPassword,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }), __jsx(Form.Input, {\n    fluid: true,\n    icon: {\n      name: 'eye',\n      circular: true,\n      link: true,\n      onClick: () => showTyped(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        field2: !field2\n      }))\n    },\n    type: field2 ? 'text' : 'password',\n    iconPosition: \"left\",\n    label: \"New Password\",\n    placeholder: \"Enter New Password\",\n    name: \"newPassword\",\n    onChange: handleChange,\n    value: newPassword,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  }), __jsx(Button, {\n    disabled: loading || currentPassword === '' || newPassword === '',\n    compact: true,\n    icon: \"configure\",\n    type: \"submit\",\n    color: \"teal\",\n    content: \"Confirm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  }), __jsx(Button, {\n    disabled: loading,\n    compact: true,\n    icon: \"cancel\",\n    type: \"button\",\n    content: \"Cancel\",\n    onClick: () => showPasswordFields(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }\n  }), __jsx(Message, {\n    icon: \"meh\",\n    error: true,\n    header: \"Oops!\",\n    content: errorMsg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }\n  })))), __jsx(Divider, {\n    hidden: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Settings;","map":{"version":3,"sources":["C:/Users/User/Desktop/ADVANCED REACT/mernChat/components/Profile/Settings.js"],"names":["React","useState","useEffect","useRef","List","Divider","Message","Checkbox","Form","Button","passwordUpdate","toggleMessagePopup","Settings","newMessagePopup","passwordFields","showPasswordFields","popupSetting","setPopupSetting","success","setSuccess","newMessageSettings","showNewMessageSettings","isFirstRun","setTimeout","current","marginTop","UpdatePassword","loading","setLoading","errorMsg","setError","userPasswords","setUserPasswords","currentPassword","newPassword","typed","showTyped","field1","field2","handleChange","e","name","value","target","prev","preventDefault","circular","link","onClick"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport {\r\n  List,\r\n  Divider,\r\n  Message,\r\n  Checkbox,\r\n  Form,\r\n  Button,\r\n} from 'semantic-ui-react';\r\nimport { passwordUpdate, toggleMessagePopup } from '../../utils/profileActions';\r\n\r\nfunction Settings({ newMessagePopup }) {\r\n  const [passwordFields, showPasswordFields] = useState(false);\r\n  const [popupSetting, setPopupSetting] = useState(newMessagePopup);\r\n  const [success, setSuccess] = useState(false);\r\n  const [newMessageSettings, showNewMessageSettings] = useState(false);\r\n\r\n  const isFirstRun = useRef(true);\r\n\r\n  useEffect(() => {\r\n    success && setTimeout(() => setSuccess(false), 3000);\r\n  }, [success]);\r\n\r\n  useEffect(() => {\r\n    if (isFirstRun.current) {\r\n      isFirstRun.current = false;\r\n      return;\r\n    }\r\n  }, [popupSetting]);\r\n\r\n  return (\r\n    <>\r\n      {success && (\r\n        <>\r\n          <Message success icon=\"check circle\" header=\"Updated Successfully\" />\r\n          <Divider hidden />\r\n        </>\r\n      )}\r\n\r\n      <List size=\"huge\" animated>\r\n        <List.Item>\r\n          <List.Icon name=\"user secret\" size=\"large\" verticalAlign=\"middle\" />\r\n          <List.Content>\r\n            <List.Header\r\n              onClick={() => showPasswordFields(!passwordFields)}\r\n              as=\"a\"\r\n              content=\"Update Password\"\r\n            />\r\n          </List.Content>\r\n\r\n          {passwordFields && (\r\n            <UpdatePassword\r\n              setSuccess={setSuccess}\r\n              showPasswordFields={showPasswordFields}\r\n            />\r\n          )}\r\n        </List.Item>\r\n        <Divider />\r\n\r\n        <List.Item>\r\n          <List.Icon\r\n            name=\"paper plane outline\"\r\n            size=\"large\"\r\n            verticalAlign=\"middle\"\r\n          />\r\n\r\n          <List.Content>\r\n            <List.Header\r\n              onClick={() => showNewMessageSettings(!newMessageSettings)}\r\n              as=\"a\"\r\n              content=\"Show New Message Popup?\"\r\n            />\r\n          </List.Content>\r\n\r\n          <div style={{ marginTop: '10px' }}>\r\n            Control whether a Popup should appear when there is a New Message or\r\n            not.\r\n            <br />\r\n            <br />\r\n            <Checkbox\r\n              checked={popupSetting}\r\n              toggle\r\n              onChange={() =>\r\n                toggleMessagePopup(popupSetting, setPopupSetting, setSuccess)\r\n              }\r\n            />\r\n          </div>\r\n        </List.Item>\r\n\r\n        <Divider />\r\n      </List>\r\n    </>\r\n  );\r\n}\r\n\r\nconst UpdatePassword = ({ setSuccess, showPasswordFields }) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [errorMsg, setError] = useState(null);\r\n\r\n  const [userPasswords, setUserPasswords] = useState({\r\n    currentPassword: '',\r\n    newPassword: '',\r\n  });\r\n  const [typed, showTyped] = useState({\r\n    field1: false,\r\n    field2: false,\r\n  });\r\n\r\n  const { field1, field2 } = typed;\r\n\r\n  const { currentPassword, newPassword } = userPasswords;\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setUserPasswords((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    errorMsg && setTimeout(() => setError(null), 5000);\r\n  }, [errorMsg]);\r\n\r\n  return (\r\n    <>\r\n      <Form\r\n        error={errorMsg !== null}\r\n        loading={loading}\r\n        onSubmit={async (e) => {\r\n          e.preventDefault();\r\n          setLoading(true);\r\n\r\n          await passwordUpdate(setSuccess, userPasswords);\r\n          setLoading(false);\r\n\r\n          showPasswordFields(false);\r\n        }}\r\n      >\r\n        <List.List>\r\n          <List.Item>\r\n            <Form.Input\r\n              fluid\r\n              icon={{\r\n                name: 'eye',\r\n                circular: true,\r\n                link: true,\r\n                onClick: () =>\r\n                  showTyped((prev) => ({ ...prev, field1: !field1 })),\r\n              }}\r\n              type={field1 ? 'text' : 'password'}\r\n              iconPosition=\"left\"\r\n              label=\"Current Password\"\r\n              placeholder=\"Enter current Password\"\r\n              name=\"currentPassword\"\r\n              onChange={handleChange}\r\n              value={currentPassword}\r\n            />\r\n\r\n            <Form.Input\r\n              fluid\r\n              icon={{\r\n                name: 'eye',\r\n                circular: true,\r\n                link: true,\r\n                onClick: () =>\r\n                  showTyped((prev) => ({ ...prev, field2: !field2 })),\r\n              }}\r\n              type={field2 ? 'text' : 'password'}\r\n              iconPosition=\"left\"\r\n              label=\"New Password\"\r\n              placeholder=\"Enter New Password\"\r\n              name=\"newPassword\"\r\n              onChange={handleChange}\r\n              value={newPassword}\r\n            />\r\n\r\n            {/* BUTTONS */}\r\n\r\n            <Button\r\n              disabled={loading || currentPassword === '' || newPassword === ''}\r\n              compact\r\n              icon=\"configure\"\r\n              type=\"submit\"\r\n              color=\"teal\"\r\n              content=\"Confirm\"\r\n            />\r\n\r\n            <Button\r\n              disabled={loading}\r\n              compact\r\n              icon=\"cancel\"\r\n              type=\"button\"\r\n              content=\"Cancel\"\r\n              onClick={() => showPasswordFields(false)}\r\n            />\r\n\r\n            <Message icon=\"meh\" error header=\"Oops!\" content={errorMsg} />\r\n          </List.Item>\r\n        </List.List>\r\n      </Form>\r\n      <Divider hidden />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n"]},"metadata":{},"sourceType":"module"}