{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/User/Desktop/REACT/mernChat/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/User/Desktop/REACT/mernChat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\REACT\\\\mernChat\\\\pages\\\\messages.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport baseUrl from '../utils/baseUrl';\nimport { parseCookies } from 'nookies';\nimport { useRouter } from 'next/router';\nimport { Segment, Header, Divider, Comment, Grid } from 'semantic-ui-react';\nimport Chat from '../components/Chats/Chat';\nimport ChatListSearch from '../components/Chats/ChatListSearch';\nimport Message from '../components/Messages/Message';\nimport MessageInputField from '../components/Messages/MessageInputField';\nimport Banner from '../components/Messages/Banner';\nimport { NoMessages } from '../components/Layout/NoData';\n\nfunction Messages(_ref) {\n  _s();\n\n  var _this = this;\n\n  var chatsData = _ref.chatsData,\n      user = _ref.user;\n\n  var _useState = useState(chatsData),\n      chats = _useState[0],\n      setChats = _useState[1];\n\n  var _useState2 = useState([]),\n      messages = _useState2[0],\n      setMessages = _useState2[1];\n\n  var _useState3 = useState({\n    name: '',\n    profilePicUrl: ''\n  }),\n      bannerData = _useState3[0],\n      setBannerData = _useState3[1];\n\n  var router = useRouter();\n  var socket = useRef(); //state to check if a user is online\n\n  var _useState4 = useState([]),\n      connectedUsers = _useState4[0],\n      setConnectedUsers = _useState4[1];\n\n  var openChatId = useRef(''); //I could just use this\n  // useEffect(() => {\n  //   //connect to the server\n  //   if (!socket.current) {\n  //     socket.current = io(baseUrl);\n  //   }\n  //   //if the socket is connected\n  //   if (socket.current) {\n  //     socket.current.emit('join', { userId: user._id });\n  //     socket.current.on('connectedUsers', ({ users }) => {\n  //       //all the users that are online is in connectedUsers\n  //       users.length > 0 && setConnectedUsers(users);\n  //     });\n  //   }\n  // }, []);\n\n  useEffect(function () {\n    //connect to the server\n    if (!socket.current) {\n      socket.current = io(baseUrl);\n    } //if the socket is connected\n\n\n    if (socket.current) {\n      socket.current.emit('join', {\n        userId: user._id\n      });\n      socket.current.on('connectedUsers', function (_ref2) {\n        var users = _ref2.users;\n        //all the users that are online is in connectedUsers\n        users.length > 0 && setConnectedUsers(users);\n      });\n    }\n\n    if (chats.length > 0 && !router.query.message) {\n      router.push(\"/messages?message=\".concat(chats[0].messagesWith), undefined, {\n        shallow: true\n      });\n    }\n\n    return function () {\n      if (socket.current) {\n        socket.current.emit('disconnect');\n        socket.current.off();\n      }\n    };\n  }, []); // LOAD MESSAGES useEffect\n\n  useEffect(function () {\n    var loadMessages = function loadMessages() {\n      socket.current.emit('loadMessages', {\n        userId: user._id,\n        messagesWith: router.query.message\n      });\n      socket.current.on('messagesLoaded', /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref3) {\n          var chat;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  chat = _ref3.chat;\n                  setMessages(chat.messages);\n                  setBannerData({\n                    name: chat.messagesWith.name,\n                    profilePicUrl: chat.messagesWith.profilePicUrl\n                  }); //i do not really understand the purpose of the openChatId\n\n                  openChatId.current = chat.messagesWith._id;\n\n                case 4:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n    };\n\n    if (socket.current) {\n      loadMessages();\n    }\n  }, [router.query.message]);\n\n  var sendMsg = function sendMsg(msg) {\n    if (socket.current) {\n      socket.current.emit('sendNewMsg', {\n        userId: user._id,\n        messageSendToUserId: openChatId.current,\n        msg: msg\n      });\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Segment, {\n    padded: true,\n    basic: true,\n    size: \"large\",\n    style: {\n      marginTop: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, __jsx(Header, {\n    icon: \"home\",\n    content: \"Go Back!\",\n    onClick: function onClick() {\n      return router.push('/');\n    },\n    style: {\n      cursor: 'pointer'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }), __jsx(Divider, {\n    hidden: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    style: {\n      marginBottom: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, __jsx(ChatListSearch, {\n    chats: chats,\n    setChats: setChats,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  })), chats.length > 0 ? __jsx(React.Fragment, null, __jsx(Grid, {\n    stackable: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, __jsx(Grid.Column, {\n    width: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 15\n    }\n  }, __jsx(Comment.Group, {\n    size: \"big\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }\n  }, __jsx(Segment, {\n    raised: true,\n    style: {\n      overflow: 'auto',\n      maxHeight: '32rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 19\n    }\n  }, chats.map(function (chat, i) {\n    return __jsx(Chat, {\n      connectedUsers: connectedUsers,\n      key: i,\n      chat: chat,\n      setChats: setChats,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 23\n      }\n    });\n  })))), __jsx(Grid.Column, {\n    width: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 15\n    }\n  }, router.query.message && __jsx(React.Fragment, null, __jsx(\"div\", {\n    style: {\n      overflow: 'auto',\n      overflowX: 'hidden',\n      maxHeight: '35rem',\n      height: '35rem',\n      backgroundColor: 'whitesmoke'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 21\n    }\n  }, __jsx(React.Fragment, null, messages.length > 0 && __jsx(React.Fragment, null, __jsx(\"div\", {\n    style: {\n      position: 'sticky',\n      top: '0'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 29\n    }\n  }, __jsx(Banner, {\n    bannerData: bannerData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 31\n    }\n  })), messages.map(function (message, i) {\n    return __jsx(Message, {\n      key: i,\n      bannerProfilePic: bannerData.profilePicUrl,\n      message: message,\n      user: user,\n      setMessages: setMessages,\n      messagesWith: openChatId.current,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 31\n      }\n    });\n  })))), __jsx(MessageInputField, {\n    sendMsg: sendMsg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 21\n    }\n  }))))) : __jsx(NoMessages, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 11\n    }\n  })));\n}\n\n_s(Messages, \"P7tQKVatkmLc9kK7eeACMcoXHXo=\", false, function () {\n  return [useRouter];\n});\n\n_c = Messages;\n\nMessages.getInitialProps = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ctx) {\n    var _parseCookies, token, res;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _parseCookies = parseCookies(ctx), token = _parseCookies.token;\n            _context2.next = 4;\n            return axios.get(\"\".concat(baseUrl, \"/api/chats\"), {\n              headers: {\n                Authorization: token\n              }\n            });\n\n          case 4:\n            res = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              chatsData: res.data\n            });\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](0);\n            return _context2.abrupt(\"return\", {\n              errorLoading: true\n            });\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 8]]);\n  }));\n\n  return function (_x2) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\nexport default Messages;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"sources":["C:/Users/User/Desktop/REACT/mernChat/pages/messages.js"],"names":["React","useEffect","useRef","useState","io","axios","baseUrl","parseCookies","useRouter","Segment","Header","Divider","Comment","Grid","Chat","ChatListSearch","Message","MessageInputField","Banner","NoMessages","Messages","chatsData","user","chats","setChats","messages","setMessages","name","profilePicUrl","bannerData","setBannerData","router","socket","connectedUsers","setConnectedUsers","openChatId","current","emit","userId","_id","on","users","length","query","message","push","messagesWith","undefined","shallow","off","loadMessages","chat","sendMsg","msg","messageSendToUserId","marginTop","cursor","marginBottom","overflow","maxHeight","map","i","overflowX","height","backgroundColor","position","top","getInitialProps","ctx","token","get","headers","Authorization","res","data","errorLoading"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAASC,YAAT,QAA6B,SAA7B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,OAAT,EAAkBC,MAAlB,EAA0BC,OAA1B,EAAmCC,OAAnC,EAA4CC,IAA5C,QAAwD,mBAAxD;AACA,OAAOC,IAAP,MAAiB,0BAAjB;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAOC,OAAP,MAAoB,gCAApB;AACA,OAAOC,iBAAP,MAA8B,0CAA9B;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,SAASC,UAAT,QAA2B,6BAA3B;;AAEA,SAASC,QAAT,OAAuC;AAAA;;AAAA;;AAAA,MAAnBC,SAAmB,QAAnBA,SAAmB;AAAA,MAARC,IAAQ,QAARA,IAAQ;;AAAA,kBACXnB,QAAQ,CAACkB,SAAD,CADG;AAAA,MAC9BE,KAD8B;AAAA,MACvBC,QADuB;;AAAA,mBAELrB,QAAQ,CAAC,EAAD,CAFH;AAAA,MAE9BsB,QAF8B;AAAA,MAEpBC,WAFoB;;AAAA,mBAGDvB,QAAQ,CAAC;AAAEwB,IAAAA,IAAI,EAAE,EAAR;AAAYC,IAAAA,aAAa,EAAE;AAA3B,GAAD,CAHP;AAAA,MAG9BC,UAH8B;AAAA,MAGlBC,aAHkB;;AAIrC,MAAMC,MAAM,GAAGvB,SAAS,EAAxB;AACA,MAAMwB,MAAM,GAAG9B,MAAM,EAArB,CALqC,CAOrC;;AAPqC,mBAQOC,QAAQ,CAAC,EAAD,CARf;AAAA,MAQ9B8B,cAR8B;AAAA,MAQdC,iBARc;;AASrC,MAAMC,UAAU,GAAGjC,MAAM,CAAC,EAAD,CAAzB,CATqC,CAWrC;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEAD,EAAAA,SAAS,CAAC,YAAM;AACd;AACA,QAAI,CAAC+B,MAAM,CAACI,OAAZ,EAAqB;AACnBJ,MAAAA,MAAM,CAACI,OAAP,GAAiBhC,EAAE,CAACE,OAAD,CAAnB;AACD,KAJa,CAMd;;;AACA,QAAI0B,MAAM,CAACI,OAAX,EAAoB;AAClBJ,MAAAA,MAAM,CAACI,OAAP,CAAeC,IAAf,CAAoB,MAApB,EAA4B;AAAEC,QAAAA,MAAM,EAAEhB,IAAI,CAACiB;AAAf,OAA5B;AAEAP,MAAAA,MAAM,CAACI,OAAP,CAAeI,EAAf,CAAkB,gBAAlB,EAAoC,iBAAe;AAAA,YAAZC,KAAY,SAAZA,KAAY;AACjD;AACAA,QAAAA,KAAK,CAACC,MAAN,GAAe,CAAf,IAAoBR,iBAAiB,CAACO,KAAD,CAArC;AACD,OAHD;AAID;;AAED,QAAIlB,KAAK,CAACmB,MAAN,GAAe,CAAf,IAAoB,CAACX,MAAM,CAACY,KAAP,CAAaC,OAAtC,EAA+C;AAC7Cb,MAAAA,MAAM,CAACc,IAAP,6BAAiCtB,KAAK,CAAC,CAAD,CAAL,CAASuB,YAA1C,GAA0DC,SAA1D,EAAqE;AACnEC,QAAAA,OAAO,EAAE;AAD0D,OAArE;AAGD;;AAED,WAAO,YAAM;AACX,UAAIhB,MAAM,CAACI,OAAX,EAAoB;AAClBJ,QAAAA,MAAM,CAACI,OAAP,CAAeC,IAAf,CAAoB,YAApB;AACAL,QAAAA,MAAM,CAACI,OAAP,CAAea,GAAf;AACD;AACF,KALD;AAMD,GA5BQ,EA4BN,EA5BM,CAAT,CA7BqC,CA2DrC;;AACAhD,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMiD,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzBlB,MAAAA,MAAM,CAACI,OAAP,CAAeC,IAAf,CAAoB,cAApB,EAAoC;AAClCC,QAAAA,MAAM,EAAEhB,IAAI,CAACiB,GADqB;AAElCO,QAAAA,YAAY,EAAEf,MAAM,CAACY,KAAP,CAAaC;AAFO,OAApC;AAKAZ,MAAAA,MAAM,CAACI,OAAP,CAAeI,EAAf,CAAkB,gBAAlB;AAAA,6EAAoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAASW,kBAAAA,IAAT,SAASA,IAAT;AAClCzB,kBAAAA,WAAW,CAACyB,IAAI,CAAC1B,QAAN,CAAX;AACAK,kBAAAA,aAAa,CAAC;AACZH,oBAAAA,IAAI,EAAEwB,IAAI,CAACL,YAAL,CAAkBnB,IADZ;AAEZC,oBAAAA,aAAa,EAAEuB,IAAI,CAACL,YAAL,CAAkBlB;AAFrB,mBAAD,CAAb,CAFkC,CAOlC;;AACAO,kBAAAA,UAAU,CAACC,OAAX,GAAqBe,IAAI,CAACL,YAAL,CAAkBP,GAAvC;;AARkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAApC;;AAAA;AAAA;AAAA;AAAA;AAUD,KAhBD;;AAkBA,QAAIP,MAAM,CAACI,OAAX,EAAoB;AAClBc,MAAAA,YAAY;AACb;AACF,GAtBQ,EAsBN,CAACnB,MAAM,CAACY,KAAP,CAAaC,OAAd,CAtBM,CAAT;;AAwBA,MAAMQ,OAAO,GAAG,SAAVA,OAAU,CAACC,GAAD,EAAS;AACvB,QAAIrB,MAAM,CAACI,OAAX,EAAoB;AAClBJ,MAAAA,MAAM,CAACI,OAAP,CAAeC,IAAf,CAAoB,YAApB,EAAkC;AAChCC,QAAAA,MAAM,EAAEhB,IAAI,CAACiB,GADmB;AAEhCe,QAAAA,mBAAmB,EAAEnB,UAAU,CAACC,OAFA;AAGhCiB,QAAAA,GAAG,EAAHA;AAHgC,OAAlC;AAKD;AACF,GARD;;AASA,SACE,4BACE,MAAC,OAAD;AAAS,IAAA,MAAM,MAAf;AAAgB,IAAA,KAAK,MAArB;AAAsB,IAAA,IAAI,EAAC,OAA3B;AAAmC,IAAA,KAAK,EAAE;AAAEE,MAAAA,SAAS,EAAE;AAAb,KAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,OAAO,EAAC,UAFV;AAGE,IAAA,OAAO,EAAE;AAAA,aAAMxB,MAAM,CAACc,IAAP,CAAY,GAAZ,CAAN;AAAA,KAHX;AAIE,IAAA,KAAK,EAAE;AAAEW,MAAAA,MAAM,EAAE;AAAV,KAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAOE,MAAC,OAAD;AAAS,IAAA,MAAM,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,EASE;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,YAAY,EAAE;AAAhB,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,cAAD;AAAgB,IAAA,KAAK,EAAElC,KAAvB;AAA8B,IAAA,QAAQ,EAAEC,QAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CATF,EAaGD,KAAK,CAACmB,MAAN,GAAe,CAAf,GACC,4BACE,MAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD,CAAM,MAAN;AAAa,IAAA,KAAK,EAAE,CAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD,CAAS,KAAT;AAAe,IAAA,IAAI,EAAC,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AACE,IAAA,MAAM,MADR;AAEE,IAAA,KAAK,EAAE;AAAEgB,MAAAA,QAAQ,EAAE,MAAZ;AAAoBC,MAAAA,SAAS,EAAE;AAA/B,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGpC,KAAK,CAACqC,GAAN,CAAU,UAACT,IAAD,EAAOU,CAAP;AAAA,WACT,MAAC,IAAD;AACE,MAAA,cAAc,EAAE5B,cADlB;AAEE,MAAA,GAAG,EAAE4B,CAFP;AAGE,MAAA,IAAI,EAAEV,IAHR;AAIE,MAAA,QAAQ,EAAE3B,QAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADS;AAAA,GAAV,CAJH,CADF,CADF,CADF,EAmBE,MAAC,IAAD,CAAM,MAAN;AAAa,IAAA,KAAK,EAAE,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGO,MAAM,CAACY,KAAP,CAAaC,OAAb,IACC,4BACE;AACE,IAAA,KAAK,EAAE;AACLc,MAAAA,QAAQ,EAAE,MADL;AAELI,MAAAA,SAAS,EAAE,QAFN;AAGLH,MAAAA,SAAS,EAAE,OAHN;AAILI,MAAAA,MAAM,EAAE,OAJH;AAKLC,MAAAA,eAAe,EAAE;AALZ,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASE,4BACGvC,QAAQ,CAACiB,MAAT,GAAkB,CAAlB,IACC,4BACE;AAAK,IAAA,KAAK,EAAE;AAAEuB,MAAAA,QAAQ,EAAE,QAAZ;AAAsBC,MAAAA,GAAG,EAAE;AAA3B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,UAAU,EAAErC,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAKGJ,QAAQ,CAACmC,GAAT,CAAa,UAAChB,OAAD,EAAUiB,CAAV;AAAA,WACZ,MAAC,OAAD;AACE,MAAA,GAAG,EAAEA,CADP;AAEE,MAAA,gBAAgB,EAAEhC,UAAU,CAACD,aAF/B;AAGE,MAAA,OAAO,EAAEgB,OAHX;AAIE,MAAA,IAAI,EAAEtB,IAJR;AAKE,MAAA,WAAW,EAAEI,WALf;AAME,MAAA,YAAY,EAAES,UAAU,CAACC,OAN3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADY;AAAA,GAAb,CALH,CAFJ,CATF,CADF,EA+BE,MAAC,iBAAD;AAAmB,IAAA,OAAO,EAAEgB,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA/BF,CAFJ,CAnBF,CADF,CADD,GA6DC,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1EJ,CADF,CADF;AAiFD;;GA9KQhC,Q;UAIQZ,S;;;KAJRY,Q;;AAgLTA,QAAQ,CAAC+C,eAAT;AAAA,uEAA2B,kBAAOC,GAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAEL7D,YAAY,CAAC6D,GAAD,CAFP,EAEfC,KAFe,iBAEfA,KAFe;AAAA;AAAA,mBAILhE,KAAK,CAACiE,GAAN,WAAahE,OAAb,iBAAkC;AAClDiE,cAAAA,OAAO,EAAE;AAAEC,gBAAAA,aAAa,EAAEH;AAAjB;AADyC,aAAlC,CAJK;;AAAA;AAIjBI,YAAAA,GAJiB;AAAA,8CAQhB;AAAEpD,cAAAA,SAAS,EAAEoD,GAAG,CAACC;AAAjB,aARgB;;AAAA;AAAA;AAAA;AAAA,8CAUhB;AAAEC,cAAAA,YAAY,EAAE;AAAhB,aAVgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAAA;AAAA;AAAA;AAAA;;AAcA,eAAevD,QAAf","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport io from 'socket.io-client';\r\nimport axios from 'axios';\r\nimport baseUrl from '../utils/baseUrl';\r\nimport { parseCookies } from 'nookies';\r\nimport { useRouter } from 'next/router';\r\nimport { Segment, Header, Divider, Comment, Grid } from 'semantic-ui-react';\r\nimport Chat from '../components/Chats/Chat';\r\nimport ChatListSearch from '../components/Chats/ChatListSearch';\r\nimport Message from '../components/Messages/Message';\r\nimport MessageInputField from '../components/Messages/MessageInputField';\r\nimport Banner from '../components/Messages/Banner';\r\nimport { NoMessages } from '../components/Layout/NoData';\r\n\r\nfunction Messages({ chatsData, user }) {\r\n  const [chats, setChats] = useState(chatsData);\r\n  const [messages, setMessages] = useState([]);\r\n  const [bannerData, setBannerData] = useState({ name: '', profilePicUrl: '' });\r\n  const router = useRouter();\r\n  const socket = useRef();\r\n\r\n  //state to check if a user is online\r\n  const [connectedUsers, setConnectedUsers] = useState([]);\r\n  const openChatId = useRef('');\r\n\r\n  //I could just use this\r\n  // useEffect(() => {\r\n  //   //connect to the server\r\n  //   if (!socket.current) {\r\n  //     socket.current = io(baseUrl);\r\n  //   }\r\n\r\n  //   //if the socket is connected\r\n  //   if (socket.current) {\r\n  //     socket.current.emit('join', { userId: user._id });\r\n\r\n  //     socket.current.on('connectedUsers', ({ users }) => {\r\n  //       //all the users that are online is in connectedUsers\r\n  //       users.length > 0 && setConnectedUsers(users);\r\n  //     });\r\n  //   }\r\n  // }, []);\r\n\r\n  useEffect(() => {\r\n    //connect to the server\r\n    if (!socket.current) {\r\n      socket.current = io(baseUrl);\r\n    }\r\n\r\n    //if the socket is connected\r\n    if (socket.current) {\r\n      socket.current.emit('join', { userId: user._id });\r\n\r\n      socket.current.on('connectedUsers', ({ users }) => {\r\n        //all the users that are online is in connectedUsers\r\n        users.length > 0 && setConnectedUsers(users);\r\n      });\r\n    }\r\n\r\n    if (chats.length > 0 && !router.query.message) {\r\n      router.push(`/messages?message=${chats[0].messagesWith}`, undefined, {\r\n        shallow: true,\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      if (socket.current) {\r\n        socket.current.emit('disconnect');\r\n        socket.current.off();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // LOAD MESSAGES useEffect\r\n  useEffect(() => {\r\n    const loadMessages = () => {\r\n      socket.current.emit('loadMessages', {\r\n        userId: user._id,\r\n        messagesWith: router.query.message,\r\n      });\r\n\r\n      socket.current.on('messagesLoaded', async ({ chat }) => {\r\n        setMessages(chat.messages);\r\n        setBannerData({\r\n          name: chat.messagesWith.name,\r\n          profilePicUrl: chat.messagesWith.profilePicUrl,\r\n        });\r\n\r\n        //i do not really understand the purpose of the openChatId\r\n        openChatId.current = chat.messagesWith._id;\r\n      });\r\n    };\r\n\r\n    if (socket.current) {\r\n      loadMessages();\r\n    }\r\n  }, [router.query.message]);\r\n\r\n  const sendMsg = (msg) => {\r\n    if (socket.current) {\r\n      socket.current.emit('sendNewMsg', {\r\n        userId: user._id,\r\n        messageSendToUserId: openChatId.current,\r\n        msg,\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <Segment padded basic size=\"large\" style={{ marginTop: '5px' }}>\r\n        <Header\r\n          icon=\"home\"\r\n          content=\"Go Back!\"\r\n          onClick={() => router.push('/')}\r\n          style={{ cursor: 'pointer' }}\r\n        />\r\n        <Divider hidden />\r\n\r\n        <div style={{ marginBottom: '10px' }}>\r\n          <ChatListSearch chats={chats} setChats={setChats} />\r\n        </div>\r\n\r\n        {chats.length > 0 ? (\r\n          <>\r\n            <Grid stackable>\r\n              <Grid.Column width={4}>\r\n                <Comment.Group size=\"big\">\r\n                  <Segment\r\n                    raised\r\n                    style={{ overflow: 'auto', maxHeight: '32rem' }}\r\n                  >\r\n                    {chats.map((chat, i) => (\r\n                      <Chat\r\n                        connectedUsers={connectedUsers}\r\n                        key={i}\r\n                        chat={chat}\r\n                        setChats={setChats}\r\n                      />\r\n                    ))}\r\n                  </Segment>\r\n                </Comment.Group>\r\n              </Grid.Column>\r\n\r\n              <Grid.Column width={12}>\r\n                {router.query.message && (\r\n                  <>\r\n                    <div\r\n                      style={{\r\n                        overflow: 'auto',\r\n                        overflowX: 'hidden',\r\n                        maxHeight: '35rem',\r\n                        height: '35rem',\r\n                        backgroundColor: 'whitesmoke',\r\n                      }}\r\n                    >\r\n                      <>\r\n                        {messages.length > 0 && (\r\n                          <>\r\n                            <div style={{ position: 'sticky', top: '0' }}>\r\n                              <Banner bannerData={bannerData} />\r\n                            </div>\r\n\r\n                            {messages.map((message, i) => (\r\n                              <Message\r\n                                key={i}\r\n                                bannerProfilePic={bannerData.profilePicUrl}\r\n                                message={message}\r\n                                user={user}\r\n                                setMessages={setMessages}\r\n                                messagesWith={openChatId.current}\r\n                              />\r\n                            ))}\r\n                          </>\r\n                        )}\r\n                      </>\r\n                    </div>\r\n                    <MessageInputField sendMsg={sendMsg} />\r\n                  </>\r\n                )}\r\n              </Grid.Column>\r\n            </Grid>\r\n          </>\r\n        ) : (\r\n          <NoMessages />\r\n        )}\r\n      </Segment>\r\n    </>\r\n  );\r\n}\r\n\r\nMessages.getInitialProps = async (ctx) => {\r\n  try {\r\n    const { token } = parseCookies(ctx);\r\n\r\n    const res = await axios.get(`${baseUrl}/api/chats`, {\r\n      headers: { Authorization: token },\r\n    });\r\n\r\n    return { chatsData: res.data };\r\n  } catch (error) {\r\n    return { errorLoading: true };\r\n  }\r\n};\r\n\r\nexport default Messages;\r\n"]},"metadata":{},"sourceType":"module"}