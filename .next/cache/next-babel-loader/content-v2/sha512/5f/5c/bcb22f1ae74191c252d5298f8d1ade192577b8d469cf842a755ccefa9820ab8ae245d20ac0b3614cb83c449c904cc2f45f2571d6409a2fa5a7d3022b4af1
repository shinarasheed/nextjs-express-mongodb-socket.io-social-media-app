{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/User/Desktop/REACT/mernChat/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/User/Desktop/REACT/mernChat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\REACT\\\\mernChat\\\\pages\\\\post\\\\[postId].js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Link from 'next/link';\nimport axios from 'axios';\nimport { parseCookies } from 'nookies';\nimport { Card, Icon, Image, Divider, Segment, Container } from 'semantic-ui-react';\nimport PostComments from '../../components/Post/PostComments';\nimport CommentInputField from '../../components/Post/CommentInputField';\nimport LikesList from '../../components/Post/LikesList';\nimport { likePost } from '../../utils/postActions';\nimport calculateTime from '../../utils/calculateTime';\nimport { NoPostFound } from '../../components/Layout/NoData';\nimport baseUrl from '../../utils/baseUrl';\n\nvar Post = function Post(_ref) {\n  _s();\n\n  var post = _ref.post,\n      errorLoading = _ref.errorLoading,\n      user = _ref.user;\n\n  if (errorLoading) {\n    return __jsx(NoPostFound, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 12\n      }\n    });\n  }\n\n  var _useState = useState(post.likes),\n      likes = _useState[0],\n      setLikes = _useState[1];\n\n  var isLiked = likes.length > 0 && likes.filter(function (like) {\n    return like.user === user._id;\n  }).length > 0;\n\n  var _useState2 = useState(post.comments),\n      comments = _useState2[0],\n      setComments = _useState2[1];\n\n  return __jsx(Container, {\n    text: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, __jsx(Segment, {\n    basic: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, __jsx(Card, {\n    color: \"teal\",\n    fluid: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, post.picUrl && __jsx(Image, {\n    src: post.picUrl,\n    style: {\n      cursor: 'pointer'\n    },\n    floated: \"left\",\n    wrapped: true,\n    ui: false,\n    alt: \"PostImage\",\n    onClick: function onClick() {\n      return setShowModal(true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }), __jsx(Card.Content, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, __jsx(Image, {\n    floated: \"left\",\n    src: post.user.profilePicUrl,\n    avatar: true,\n    circular: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }), __jsx(Card.Header, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, __jsx(Link, {\n    href: \"/\".concat(post.user.username),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }\n  }, __jsx(\"a\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, post.user.name))), __jsx(Card.Meta, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, calculateTime(post.createdAt)), post.location && __jsx(Card.Meta, {\n    content: post.location,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 31\n    }\n  }), __jsx(Card.Description, {\n    style: {\n      fontSize: '17px',\n      letterSpacing: '0.1px',\n      wordSpacing: '0.35px'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, post.text)), __jsx(Card.Content, {\n    extra: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, __jsx(Icon, {\n    name: isLiked ? 'heart' : 'heart outline',\n    color: \"red\",\n    style: {\n      cursor: 'pointer'\n    },\n    onClick: function onClick() {\n      return likePost(post._id, user._id, setLikes, isLiked ? false : true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }), __jsx(LikesList, {\n    postId: post._id,\n    trigger: likes.length > 0 && __jsx(\"span\", {\n      className: \"spanLikesList\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 19\n      }\n    }, \"\".concat(likes.length, \" \").concat(likes.length === 1 ? 'like' : 'likes')),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }), __jsx(Icon, {\n    name: \"comment outline\",\n    style: {\n      marginLeft: '7px'\n    },\n    color: \"blue\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }), comments.length > 0 && comments.map(function (comment) {\n    return __jsx(PostComments, {\n      key: comment._id,\n      comment: comment,\n      postId: post._id,\n      user: user,\n      setComments: setComments,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }\n    });\n  }), __jsx(Divider, {\n    hidden: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }), __jsx(CommentInputField, {\n    user: user,\n    postId: post._id,\n    setComments: setComments,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  })))), __jsx(Divider, {\n    hidden: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(Post, \"FZ8IKe0qNWwhnIqBb17o3QwPbqU=\");\n\n_c = Post;\n\nPost.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n    var postId, _parseCookies, token, _yield$axios$get, data;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            postId = ctx.query.postId;\n            _parseCookies = parseCookies(ctx), token = _parseCookies.token;\n            _context.next = 5;\n            return axios.get(\"\".concat(baseUrl, \"/api/post/\").concat(postId), {\n              headers: {\n                Authorization: token\n              }\n            });\n\n          case 5:\n            _yield$axios$get = _context.sent;\n            data = _yield$axios$get.data;\n            return _context.abrupt(\"return\", {\n              post: data\n            });\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            return _context.abrupt(\"return\", {\n              errorLoading: true\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 10]]);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["C:/Users/User/Desktop/REACT/mernChat/pages/post/[postId].js"],"names":["React","useState","Link","axios","parseCookies","Card","Icon","Image","Divider","Segment","Container","PostComments","CommentInputField","LikesList","likePost","calculateTime","NoPostFound","baseUrl","Post","post","errorLoading","user","likes","setLikes","isLiked","length","filter","like","_id","comments","setComments","picUrl","cursor","setShowModal","profilePicUrl","username","name","createdAt","location","fontSize","letterSpacing","wordSpacing","text","marginLeft","map","comment","getInitialProps","ctx","postId","query","token","get","headers","Authorization","data"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport Link from 'next/link';\r\nimport axios from 'axios';\r\nimport { parseCookies } from 'nookies';\r\nimport {\r\n  Card,\r\n  Icon,\r\n  Image,\r\n  Divider,\r\n  Segment,\r\n  Container,\r\n} from 'semantic-ui-react';\r\nimport PostComments from '../../components/Post/PostComments';\r\nimport CommentInputField from '../../components/Post/CommentInputField';\r\nimport LikesList from '../../components/Post/LikesList';\r\nimport { likePost } from '../../utils/postActions';\r\nimport calculateTime from '../../utils/calculateTime';\r\nimport { NoPostFound } from '../../components/Layout/NoData';\r\nimport baseUrl from '../../utils/baseUrl';\r\n\r\nconst Post = ({ post, errorLoading, user }) => {\r\n  if (errorLoading) {\r\n    return <NoPostFound />;\r\n  }\r\n\r\n  const [likes, setLikes] = useState(post.likes);\r\n\r\n  const isLiked =\r\n    likes.length > 0 &&\r\n    likes.filter((like) => like.user === user._id).length > 0;\r\n\r\n  const [comments, setComments] = useState(post.comments);\r\n\r\n  return (\r\n    <Container text>\r\n      <Segment basic>\r\n        <Card color=\"teal\" fluid>\r\n          {post.picUrl && (\r\n            <Image\r\n              src={post.picUrl}\r\n              style={{ cursor: 'pointer' }}\r\n              floated=\"left\"\r\n              wrapped\r\n              ui={false}\r\n              alt=\"PostImage\"\r\n              onClick={() => setShowModal(true)}\r\n            />\r\n          )}\r\n\r\n          <Card.Content>\r\n            <Image\r\n              floated=\"left\"\r\n              src={post.user.profilePicUrl}\r\n              avatar\r\n              circular\r\n            />\r\n\r\n            <Card.Header>\r\n              <Link href={`/${post.user.username}`}>\r\n                <a>{post.user.name}</a>\r\n              </Link>\r\n            </Card.Header>\r\n\r\n            <Card.Meta>{calculateTime(post.createdAt)}</Card.Meta>\r\n\r\n            {post.location && <Card.Meta content={post.location} />}\r\n\r\n            <Card.Description\r\n              style={{\r\n                fontSize: '17px',\r\n                letterSpacing: '0.1px',\r\n                wordSpacing: '0.35px',\r\n              }}\r\n            >\r\n              {post.text}\r\n            </Card.Description>\r\n          </Card.Content>\r\n\r\n          <Card.Content extra>\r\n            <Icon\r\n              name={isLiked ? 'heart' : 'heart outline'}\r\n              color=\"red\"\r\n              style={{ cursor: 'pointer' }}\r\n              onClick={() =>\r\n                likePost(post._id, user._id, setLikes, isLiked ? false : true)\r\n              }\r\n            />\r\n\r\n            <LikesList\r\n              postId={post._id}\r\n              trigger={\r\n                likes.length > 0 && (\r\n                  <span className=\"spanLikesList\">\r\n                    {`${likes.length} ${likes.length === 1 ? 'like' : 'likes'}`}\r\n                  </span>\r\n                )\r\n              }\r\n            />\r\n\r\n            <Icon\r\n              name=\"comment outline\"\r\n              style={{ marginLeft: '7px' }}\r\n              color=\"blue\"\r\n            />\r\n\r\n            {comments.length > 0 &&\r\n              comments.map((comment) => (\r\n                <PostComments\r\n                  key={comment._id}\r\n                  comment={comment}\r\n                  postId={post._id}\r\n                  user={user}\r\n                  setComments={setComments}\r\n                />\r\n              ))}\r\n\r\n            <Divider hidden />\r\n\r\n            <CommentInputField\r\n              user={user}\r\n              postId={post._id}\r\n              setComments={setComments}\r\n            />\r\n          </Card.Content>\r\n        </Card>\r\n      </Segment>\r\n      <Divider hidden />\r\n    </Container>\r\n  );\r\n};\r\n\r\nPost.getInitialProps = async (ctx) => {\r\n  try {\r\n    const { postId } = ctx.query;\r\n    const { token } = parseCookies(ctx);\r\n    const { data } = await axios.get(`${baseUrl}/api/post/${postId}`, {\r\n      headers: { Authorization: token },\r\n    });\r\n\r\n    return { post: data };\r\n  } catch (error) {\r\n    return { errorLoading: true };\r\n  }\r\n};\r\n\r\nexport default Post;\r\n"]},"metadata":{},"sourceType":"module"}