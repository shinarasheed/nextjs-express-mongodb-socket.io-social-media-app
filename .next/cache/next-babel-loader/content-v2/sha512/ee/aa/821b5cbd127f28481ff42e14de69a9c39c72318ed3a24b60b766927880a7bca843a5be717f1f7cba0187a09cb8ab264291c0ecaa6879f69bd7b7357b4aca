{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/User/Desktop/REACT/mernChat/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/User/Desktop/REACT/mernChat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\REACT\\\\mernChat\\\\pages\\\\messages.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport baseUrl from '../utils/baseUrl';\nimport { parseCookies } from 'nookies';\nimport { useRouter } from 'next/router';\nimport { Segment, Header, Divider, Comment, Grid } from 'semantic-ui-react';\nimport Chat from '../components/Chats/Chat';\nimport ChatListSearch from '../components/Chats/ChatListSearch';\nimport { NoMessages } from '../components/Layout/NoData';\n\nfunction Messages(_ref) {\n  _s();\n\n  var _this = this;\n\n  var chatsData = _ref.chatsData,\n      user = _ref.user;\n\n  var _useState = useState(chatsData),\n      chats = _useState[0],\n      setChats = _useState[1];\n\n  var router = useRouter(); //state to check if a user is online\n\n  var _useState2 = useState([]),\n      connectedUsers = _useState2[0],\n      setConnectedUsers = _useState2[1];\n\n  var socket = useRef(); //I could just use this\n  // useEffect(() => {\n  //   //connect to the server\n  //   if (!socket.current) {\n  //     socket.current = io(baseUrl);\n  //   }\n  //   //if the socket is connected\n  //   if (socket.current) {\n  //     socket.current.emit('join', { userId: user._id });\n  //     socket.current.on('connectedUsers', ({ users }) => {\n  //       //all the users that are online is in connectedUsers\n  //       users.length > 0 && setConnectedUsers(users);\n  //     });\n  //   }\n  // }, []);\n\n  useEffect(function () {\n    //connect to the server\n    if (!socket.current) {\n      socket.current = io(baseUrl);\n    } //if the socket is connected\n\n\n    if (socket.current) {\n      socket.current.emit('join', {\n        userId: user._id\n      });\n      socket.current.on('connectedUsers', function (_ref2) {\n        var users = _ref2.users;\n        //all the users that are online is in connectedUsers\n        users.length > 0 && setConnectedUsers(users);\n      });\n    }\n\n    if (chats.length > 0 && !router.query.message) {\n      router.push(\"/messages?message=\".concat(chats[0].messagesWith), undefined, {\n        shallow: true\n      });\n    }\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(Segment, {\n    padded: true,\n    basic: true,\n    size: \"large\",\n    style: {\n      marginTop: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, __jsx(Header, {\n    icon: \"home\",\n    content: \"Go Back!\",\n    onClick: function onClick() {\n      return router.push('/');\n    },\n    style: {\n      cursor: 'pointer'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }), __jsx(Divider, {\n    hidden: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    style: {\n      marginBottom: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, __jsx(ChatListSearch, {\n    chats: chats,\n    setChats: setChats,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  })), chats.length > 0 ? __jsx(React.Fragment, null, __jsx(Grid, {\n    stackable: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, __jsx(Grid.Column, {\n    width: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 15\n    }\n  }, __jsx(Comment.Group, {\n    size: \"big\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }, __jsx(Segment, {\n    raised: true,\n    style: {\n      overflow: 'auto',\n      maxHeight: '32rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 19\n    }\n  }, chats.map(function (chat, i) {\n    return __jsx(Chat, {\n      connectedUsers: connectedUsers,\n      key: i,\n      chat: chat,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 23\n      }\n    });\n  })))))) : __jsx(NoMessages, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  })));\n}\n\n_s(Messages, \"rC+ZMJtEZKx5q5Yz5CV5xOjueeQ=\", false, function () {\n  return [useRouter];\n});\n\n_c = Messages;\n\nMessages.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n    var _parseCookies, token, res;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _parseCookies = parseCookies(ctx), token = _parseCookies.token;\n            _context.next = 4;\n            return axios.get(\"\".concat(baseUrl, \"/api/chats\"), {\n              headers: {\n                Authorization: token\n              }\n            });\n\n          case 4:\n            res = _context.sent;\n            return _context.abrupt(\"return\", {\n              chatsData: res.data\n            });\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            return _context.abrupt(\"return\", {\n              errorLoading: true\n            });\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 8]]);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default Messages;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"sources":["C:/Users/User/Desktop/REACT/mernChat/pages/messages.js"],"names":["React","useEffect","useRef","useState","io","axios","baseUrl","parseCookies","useRouter","Segment","Header","Divider","Comment","Grid","Chat","ChatListSearch","NoMessages","Messages","chatsData","user","chats","setChats","router","connectedUsers","setConnectedUsers","socket","current","emit","userId","_id","on","users","length","query","message","push","messagesWith","undefined","shallow","marginTop","cursor","marginBottom","overflow","maxHeight","map","chat","i","getInitialProps","ctx","token","get","headers","Authorization","res","data","errorLoading"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport io from 'socket.io-client';\r\nimport axios from 'axios';\r\nimport baseUrl from '../utils/baseUrl';\r\nimport { parseCookies } from 'nookies';\r\nimport { useRouter } from 'next/router';\r\nimport { Segment, Header, Divider, Comment, Grid } from 'semantic-ui-react';\r\nimport Chat from '../components/Chats/Chat';\r\nimport ChatListSearch from '../components/Chats/ChatListSearch';\r\nimport { NoMessages } from '../components/Layout/NoData';\r\n\r\nfunction Messages({ chatsData, user }) {\r\n  const [chats, setChats] = useState(chatsData);\r\n  const router = useRouter();\r\n\r\n  //state to check if a user is online\r\n  const [connectedUsers, setConnectedUsers] = useState([]);\r\n\r\n  const socket = useRef();\r\n\r\n  //I could just use this\r\n  // useEffect(() => {\r\n  //   //connect to the server\r\n  //   if (!socket.current) {\r\n  //     socket.current = io(baseUrl);\r\n  //   }\r\n\r\n  //   //if the socket is connected\r\n  //   if (socket.current) {\r\n  //     socket.current.emit('join', { userId: user._id });\r\n\r\n  //     socket.current.on('connectedUsers', ({ users }) => {\r\n  //       //all the users that are online is in connectedUsers\r\n  //       users.length > 0 && setConnectedUsers(users);\r\n  //     });\r\n  //   }\r\n  // }, []);\r\n\r\n  useEffect(() => {\r\n    //connect to the server\r\n    if (!socket.current) {\r\n      socket.current = io(baseUrl);\r\n    }\r\n\r\n    //if the socket is connected\r\n    if (socket.current) {\r\n      socket.current.emit('join', { userId: user._id });\r\n\r\n      socket.current.on('connectedUsers', ({ users }) => {\r\n        //all the users that are online is in connectedUsers\r\n        users.length > 0 && setConnectedUsers(users);\r\n      });\r\n    }\r\n\r\n    if (chats.length > 0 && !router.query.message) {\r\n      router.push(`/messages?message=${chats[0].messagesWith}`, undefined, {\r\n        shallow: true,\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Segment padded basic size=\"large\" style={{ marginTop: '5px' }}>\r\n        <Header\r\n          icon=\"home\"\r\n          content=\"Go Back!\"\r\n          onClick={() => router.push('/')}\r\n          style={{ cursor: 'pointer' }}\r\n        />\r\n        <Divider hidden />\r\n\r\n        <div style={{ marginBottom: '10px' }}>\r\n          <ChatListSearch chats={chats} setChats={setChats} />\r\n        </div>\r\n\r\n        {chats.length > 0 ? (\r\n          <>\r\n            <Grid stackable>\r\n              <Grid.Column width={4}>\r\n                <Comment.Group size=\"big\">\r\n                  <Segment\r\n                    raised\r\n                    style={{ overflow: 'auto', maxHeight: '32rem' }}\r\n                  >\r\n                    {chats.map((chat, i) => (\r\n                      <Chat\r\n                        connectedUsers={connectedUsers}\r\n                        key={i}\r\n                        chat={chat}\r\n                      />\r\n                    ))}\r\n                  </Segment>\r\n                </Comment.Group>\r\n              </Grid.Column>\r\n            </Grid>\r\n          </>\r\n        ) : (\r\n          <NoMessages />\r\n        )}\r\n      </Segment>\r\n    </>\r\n  );\r\n}\r\n\r\nMessages.getInitialProps = async (ctx) => {\r\n  try {\r\n    const { token } = parseCookies(ctx);\r\n\r\n    const res = await axios.get(`${baseUrl}/api/chats`, {\r\n      headers: { Authorization: token },\r\n    });\r\n\r\n    return { chatsData: res.data };\r\n  } catch (error) {\r\n    return { errorLoading: true };\r\n  }\r\n};\r\n\r\nexport default Messages;\r\n"]},"metadata":{},"sourceType":"module"}