{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\REACT\\\\mernChat\\\\pages\\\\notifications.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { Feed, Segment, Divider, Container } from 'semantic-ui-react';\nimport axios from 'axios';\nimport baseUrl from '../utils/baseUrl';\nimport { parseCookies } from 'nookies';\nimport cookie from 'js-cookie';\nimport { NoNotifications } from '../components/Layout/NoData';\nimport LikeNotification from '../components/Notifications/LikeNotifications';\nimport CommentNotification from '../components/Notifications/CommentNotifications';\nimport FollowerNotification from '../components/Notifications/FollowNotifications';\n\nfunction Notifications({\n  notifications,\n  errorLoading,\n  user,\n  userFollowStats\n}) {\n  const {\n    0: loggedUserFollowStats,\n    1: setUserFollowStats\n  } = useState(userFollowStats);\n  useEffect(() => {\n    const notificationRead = async () => {\n      try {\n        await axios.post(`${baseUrl}/api/notifications`, {}, {\n          headers: {\n            Authorization: cookie.get('token')\n          }\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    notificationRead();\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(Container, {\n    style: {\n      marginTop: '1.5rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, notifications.length > 0 ? __jsx(Segment, {\n    color: \"teal\",\n    raised: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    style: {\n      maxHeight: '40rem',\n      overflow: 'auto',\n      height: '40rem',\n      position: 'relative',\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, __jsx(Feed, {\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 15\n    }\n  }, notifications.map(notification => __jsx(React.Fragment, null, notification.type === 'newLike' && notification.post !== null && __jsx(LikeNotification, {\n    key: notification._id,\n    notification: notification,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 25\n    }\n  }), notification.type === 'newComment' && notification.post !== null && __jsx(CommentNotification, {\n    key: notification._id,\n    notification: notification,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 25\n    }\n  }), notification.type === 'newFollower' && __jsx(FollowerNotification, {\n    key: notification._id,\n    notification: notification,\n    loggedUserFollowStats: loggedUserFollowStats,\n    setUserFollowStats: setUserFollowStats,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 23\n    }\n  })))))) : __jsx(NoNotifications, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }), __jsx(Divider, {\n    hidden: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  })));\n}\n\nNotifications.getInitialProps = async ctx => {\n  try {\n    const {\n      token\n    } = parseCookies(ctx);\n    const res = await axios.get(`${baseUrl}/api/notifications`, {\n      headers: {\n        Authorization: token\n      }\n    });\n    return {\n      notifications: res.data\n    };\n  } catch (error) {\n    return {\n      errorLoading: true\n    };\n  }\n};\n\nexport default Notifications;","map":{"version":3,"sources":["C:/Users/User/Desktop/REACT/mernChat/pages/notifications.js"],"names":["React","useEffect","useState","Feed","Segment","Divider","Container","axios","baseUrl","parseCookies","cookie","NoNotifications","LikeNotification","CommentNotification","FollowerNotification","Notifications","notifications","errorLoading","user","userFollowStats","loggedUserFollowStats","setUserFollowStats","notificationRead","post","headers","Authorization","get","error","console","log","marginTop","length","maxHeight","overflow","height","position","width","map","notification","type","_id","getInitialProps","ctx","token","res","data"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Feed, Segment, Divider, Container } from 'semantic-ui-react';\r\nimport axios from 'axios';\r\nimport baseUrl from '../utils/baseUrl';\r\nimport { parseCookies } from 'nookies';\r\nimport cookie from 'js-cookie';\r\nimport { NoNotifications } from '../components/Layout/NoData';\r\nimport LikeNotification from '../components/Notifications/LikeNotifications';\r\nimport CommentNotification from '../components/Notifications/CommentNotifications';\r\nimport FollowerNotification from '../components/Notifications/FollowNotifications';\r\n\r\nfunction Notifications({ notifications, errorLoading, user, userFollowStats }) {\r\n  const [loggedUserFollowStats, setUserFollowStats] = useState(userFollowStats);\r\n\r\n  useEffect(() => {\r\n    const notificationRead = async () => {\r\n      try {\r\n        await axios.post(\r\n          `${baseUrl}/api/notifications`,\r\n          {},\r\n          { headers: { Authorization: cookie.get('token') } }\r\n        );\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n\r\n    notificationRead();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Container style={{ marginTop: '1.5rem' }}>\r\n        {notifications.length > 0 ? (\r\n          <Segment color=\"teal\" raised>\r\n            <div\r\n              style={{\r\n                maxHeight: '40rem',\r\n                overflow: 'auto',\r\n                height: '40rem',\r\n                position: 'relative',\r\n                width: '100%',\r\n              }}\r\n            >\r\n              <Feed size=\"small\">\r\n                {notifications.map((notification) => (\r\n                  <>\r\n                    {notification.type === 'newLike' &&\r\n                      notification.post !== null && (\r\n                        <LikeNotification\r\n                          key={notification._id}\r\n                          notification={notification}\r\n                        />\r\n                      )}\r\n\r\n                    {notification.type === 'newComment' &&\r\n                      notification.post !== null && (\r\n                        <CommentNotification\r\n                          key={notification._id}\r\n                          notification={notification}\r\n                        />\r\n                      )}\r\n\r\n                    {notification.type === 'newFollower' && (\r\n                      <FollowerNotification\r\n                        key={notification._id}\r\n                        notification={notification}\r\n                        loggedUserFollowStats={loggedUserFollowStats}\r\n                        setUserFollowStats={setUserFollowStats}\r\n                      />\r\n                    )}\r\n                  </>\r\n                ))}\r\n              </Feed>\r\n            </div>\r\n          </Segment>\r\n        ) : (\r\n          <NoNotifications />\r\n        )}\r\n\r\n        <Divider hidden />\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nNotifications.getInitialProps = async (ctx) => {\r\n  try {\r\n    const { token } = parseCookies(ctx);\r\n\r\n    const res = await axios.get(`${baseUrl}/api/notifications`, {\r\n      headers: { Authorization: token },\r\n    });\r\n\r\n    return { notifications: res.data };\r\n  } catch (error) {\r\n    return { errorLoading: true };\r\n  }\r\n};\r\n\r\nexport default Notifications;\r\n"]},"metadata":{},"sourceType":"module"}