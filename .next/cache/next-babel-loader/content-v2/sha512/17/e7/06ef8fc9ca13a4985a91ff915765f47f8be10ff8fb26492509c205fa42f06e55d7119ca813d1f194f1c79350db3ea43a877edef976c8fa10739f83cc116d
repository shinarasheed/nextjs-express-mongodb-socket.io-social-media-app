{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\ADVANCED REACT\\\\mernChat\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport baseUrl from '../utils/baseUrl';\nimport CreatePost from '../components/Post/CreatePost';\nimport PostCard from '../components/Post/CardPost';\nimport { Segment } from 'semantic-ui-react';\nimport { parseCookies } from 'nookies';\nimport { NoPosts } from '../components/Layout/NoData';\n\nfunction Index({\n  user,\n  postsData,\n  errorLoading\n}) {\n  const {\n    0: posts,\n    1: setPosts\n  } = useState(postsData);\n  const {\n    0: showToaster,\n    1: setShowToaster\n  } = useState(false);\n  useEffect(() => {\n    document.title = `Welcome, ${user.name.split(' ')[0]}`;\n  }, []);\n  if (posts.length === 0 || errorLoading) return __jsx(NoPosts, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 50\n    }\n  });\n  return __jsx(React.Fragment, null, __jsx(Segment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, __jsx(CreatePost, {\n    user: user,\n    setPosts: setPosts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }), posts.map(post => __jsx(PostCard, {\n    key: post._id,\n    post: post,\n    user: user,\n    setPosts: setPosts,\n    setShowToaster: setShowToaster,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 11\n    }\n  }))));\n}\n\nIndex.getInitialProps = async ctx => {\n  try {\n    const {\n      token\n    } = parseCookies(ctx);\n    const res = await axios.get(`${baseUrl}/api/posts`, {\n      headers: {\n        Authorization: token\n      }\n    });\n    return {\n      postsData: res.data\n    };\n  } catch (error) {\n    return {\n      errorLoading: true\n    };\n  }\n};\n\nexport default Index;","map":{"version":3,"sources":["C:/Users/User/Desktop/ADVANCED REACT/mernChat/pages/index.js"],"names":["React","useState","useEffect","axios","baseUrl","CreatePost","PostCard","Segment","parseCookies","NoPosts","Index","user","postsData","errorLoading","posts","setPosts","showToaster","setShowToaster","document","title","name","split","length","map","post","_id","getInitialProps","ctx","token","res","get","headers","Authorization","data","error"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,UAAP,MAAuB,+BAAvB;AACA,OAAOC,QAAP,MAAqB,6BAArB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,YAAT,QAA6B,SAA7B;AACA,SAASC,OAAT,QAAwB,6BAAxB;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,SAAR;AAAmBC,EAAAA;AAAnB,CAAf,EAAkD;AAChD,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBd,QAAQ,CAACW,SAAD,CAAlC;AACA,QAAM;AAAA,OAACI,WAAD;AAAA,OAAcC;AAAd,MAAgChB,QAAQ,CAAC,KAAD,CAA9C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,QAAQ,CAACC,KAAT,GAAkB,YAAWR,IAAI,CAACS,IAAL,CAAUC,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAwB,EAArD;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,MAAIP,KAAK,CAACQ,MAAN,KAAiB,CAAjB,IAAsBT,YAA1B,EAAwC,OAAO,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAExC,SACE,4BACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAY,IAAA,IAAI,EAAEF,IAAlB;AAAwB,IAAA,QAAQ,EAAEI,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGGD,KAAK,CAACS,GAAN,CAAWC,IAAD,IACT,MAAC,QAAD;AACE,IAAA,GAAG,EAAEA,IAAI,CAACC,GADZ;AAEE,IAAA,IAAI,EAAED,IAFR;AAGE,IAAA,IAAI,EAAEb,IAHR;AAIE,IAAA,QAAQ,EAAEI,QAJZ;AAKE,IAAA,cAAc,EAAEE,cALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CAHH,CADF,CADF;AAiBD;;AAEDP,KAAK,CAACgB,eAAN,GAAwB,MAAOC,GAAP,IAAe;AACrC,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAYpB,YAAY,CAACmB,GAAD,CAA9B;AAEA,UAAME,GAAG,GAAG,MAAM1B,KAAK,CAAC2B,GAAN,CAAW,GAAE1B,OAAQ,YAArB,EAAkC;AAClD2B,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAEJ;AAAjB;AADyC,KAAlC,CAAlB;AAIA,WAAO;AAAEhB,MAAAA,SAAS,EAAEiB,GAAG,CAACI;AAAjB,KAAP;AACD,GARD,CAQE,OAAOC,KAAP,EAAc;AACd,WAAO;AAAErB,MAAAA,YAAY,EAAE;AAAhB,KAAP;AACD;AACF,CAZD;;AAcA,eAAeH,KAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport baseUrl from '../utils/baseUrl';\r\nimport CreatePost from '../components/Post/CreatePost';\r\nimport PostCard from '../components/Post/CardPost';\r\nimport { Segment } from 'semantic-ui-react';\r\nimport { parseCookies } from 'nookies';\r\nimport { NoPosts } from '../components/Layout/NoData';\r\n\r\nfunction Index({ user, postsData, errorLoading }) {\r\n  const [posts, setPosts] = useState(postsData);\r\n  const [showToaster, setShowToaster] = useState(false);\r\n\r\n  useEffect(() => {\r\n    document.title = `Welcome, ${user.name.split(' ')[0]}`;\r\n  }, []);\r\n\r\n  if (posts.length === 0 || errorLoading) return <NoPosts />;\r\n\r\n  return (\r\n    <>\r\n      <Segment>\r\n        <CreatePost user={user} setPosts={setPosts} />\r\n\r\n        {posts.map((post) => (\r\n          <PostCard\r\n            key={post._id}\r\n            post={post}\r\n            user={user}\r\n            setPosts={setPosts}\r\n            setShowToaster={setShowToaster}\r\n          />\r\n        ))}\r\n      </Segment>\r\n    </>\r\n  );\r\n}\r\n\r\nIndex.getInitialProps = async (ctx) => {\r\n  try {\r\n    const { token } = parseCookies(ctx);\r\n\r\n    const res = await axios.get(`${baseUrl}/api/posts`, {\r\n      headers: { Authorization: token },\r\n    });\r\n\r\n    return { postsData: res.data };\r\n  } catch (error) {\r\n    return { errorLoading: true };\r\n  }\r\n};\r\n\r\nexport default Index;\r\n"]},"metadata":{},"sourceType":"module"}