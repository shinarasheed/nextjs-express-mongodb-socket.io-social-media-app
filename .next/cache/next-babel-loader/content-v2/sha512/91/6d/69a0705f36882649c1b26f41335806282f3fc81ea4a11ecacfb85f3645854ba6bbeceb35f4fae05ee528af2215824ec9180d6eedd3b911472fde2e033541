{"ast":null,"code":"const express = require('express');\n\nconst router = express.Router();\n\nconst ChatModel = require('../models/ChatModel');\n\nconst UserModel = require('../models/UserModel');\n\nconst authMiddleware = require('../middleware/authMiddleware'); // GET ALL CHATS\n\n\nrouter.get('/', authMiddleware, async (req, res) => {\n  try {\n    const {\n      userId\n    } = req;\n    const user = await ChatModel.findOne({\n      user: userId\n    }).populate('chats.messagesWith');\n    let chatsToBeSent = [];\n\n    if (user.chats.length > 0) {\n      chatsToBeSent = await user.chats.map(chat => ({\n        messagesWith: chat.messagesWith._id,\n        name: chat.messagesWith.name,\n        profilePicUrl: chat.messagesWith.profilePicUrl,\n        lastMessage: chat.messages[chat.messages.length - 1].msg,\n        date: chat.messages[chat.messages.length - 1].date\n      }));\n    }\n\n    return res.json(chatsToBeSent);\n  } catch (error) {\n    console.error(error);\n    return res.status(500).send('Server Error');\n  }\n}); // GET USER INFO\n\nrouter.get('/user/:userToFindId', authMiddleware, async (req, res) => {\n  try {\n    const user = await UserModel.findById(req.params.userToFindId);\n\n    if (!user) {\n      return res.status(404).send('No User found');\n    }\n\n    return res.json({\n      name: user.name,\n      profilePicUrl: user.profilePicUrl\n    });\n  } catch (error) {\n    console.error(error);\n    return res.status(500).send('Server Error');\n  }\n}); // Delete a chat\n\nrouter.delete(`/:messagesWith`, authMiddleware, async (req, res) => {\n  try {\n    const {\n      userId\n    } = req;\n    const {\n      messagesWith\n    } = req.params;\n    const user = await ChatModel.findOne({\n      user: userId\n    });\n    const chatToDelete = user.chats.find(chat => chat.messagesWith.toString() === messagesWith);\n\n    if (!chatToDelete) {\n      return res.status(404).send('Chat not found');\n    }\n\n    const indexOf = user.chats.map(chat => chat.messagesWith.toString()).indexOf(messagesWith);\n    user.chats.splice(indexOf, 1);\n    await user.save();\n    return res.status(200).send('Chat deleted');\n  } catch (error) {\n    console.error(error);\n    return res.status(500).send('Server Error');\n  }\n});\nmodule.exports = router;","map":{"version":3,"sources":["C:/Users/User/Desktop/REACT/mernChat/api/chats.js"],"names":["express","require","router","Router","ChatModel","UserModel","authMiddleware","get","req","res","userId","user","findOne","populate","chatsToBeSent","chats","length","map","chat","messagesWith","_id","name","profilePicUrl","lastMessage","messages","msg","date","json","error","console","status","send","findById","params","userToFindId","delete","chatToDelete","find","toString","indexOf","splice","save","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst ChatModel = require('../models/ChatModel');\r\nconst UserModel = require('../models/UserModel');\r\nconst authMiddleware = require('../middleware/authMiddleware');\r\n\r\n// GET ALL CHATS\r\n\r\nrouter.get('/', authMiddleware, async (req, res) => {\r\n  try {\r\n    const { userId } = req;\r\n\r\n    const user = await ChatModel.findOne({ user: userId }).populate(\r\n      'chats.messagesWith'\r\n    );\r\n\r\n    let chatsToBeSent = [];\r\n\r\n    if (user.chats.length > 0) {\r\n      chatsToBeSent = await user.chats.map((chat) => ({\r\n        messagesWith: chat.messagesWith._id,\r\n        name: chat.messagesWith.name,\r\n        profilePicUrl: chat.messagesWith.profilePicUrl,\r\n        lastMessage: chat.messages[chat.messages.length - 1].msg,\r\n        date: chat.messages[chat.messages.length - 1].date,\r\n      }));\r\n    }\r\n\r\n    return res.json(chatsToBeSent);\r\n  } catch (error) {\r\n    console.error(error);\r\n    return res.status(500).send('Server Error');\r\n  }\r\n});\r\n\r\n// GET USER INFO\r\n\r\nrouter.get('/user/:userToFindId', authMiddleware, async (req, res) => {\r\n  try {\r\n    const user = await UserModel.findById(req.params.userToFindId);\r\n\r\n    if (!user) {\r\n      return res.status(404).send('No User found');\r\n    }\r\n\r\n    return res.json({ name: user.name, profilePicUrl: user.profilePicUrl });\r\n  } catch (error) {\r\n    console.error(error);\r\n    return res.status(500).send('Server Error');\r\n  }\r\n});\r\n\r\n// Delete a chat\r\n\r\nrouter.delete(`/:messagesWith`, authMiddleware, async (req, res) => {\r\n  try {\r\n    const { userId } = req;\r\n    const { messagesWith } = req.params;\r\n\r\n    const user = await ChatModel.findOne({ user: userId });\r\n\r\n    const chatToDelete = user.chats.find(\r\n      (chat) => chat.messagesWith.toString() === messagesWith\r\n    );\r\n\r\n    if (!chatToDelete) {\r\n      return res.status(404).send('Chat not found');\r\n    }\r\n\r\n    const indexOf = user.chats\r\n      .map((chat) => chat.messagesWith.toString())\r\n      .indexOf(messagesWith);\r\n\r\n    user.chats.splice(indexOf, 1);\r\n\r\n    await user.save();\r\n\r\n    return res.status(200).send('Chat deleted');\r\n  } catch (error) {\r\n    console.error(error);\r\n    return res.status(500).send('Server Error');\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"]},"metadata":{},"sourceType":"script"}