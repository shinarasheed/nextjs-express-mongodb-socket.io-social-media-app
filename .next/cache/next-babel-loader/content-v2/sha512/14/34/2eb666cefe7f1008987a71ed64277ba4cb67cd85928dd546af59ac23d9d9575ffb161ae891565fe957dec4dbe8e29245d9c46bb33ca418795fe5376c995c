{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\REACT\\\\mernChat\\\\pages\\\\messages.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport baseUrl from '../utils/baseUrl';\nimport { parseCookies } from 'nookies';\nimport { useRouter } from 'next/router';\nimport { Segment, Header, Divider, Comment, Grid } from 'semantic-ui-react';\nimport Chat from '../components/Chats/Chat';\nimport ChatListSearch from '../components/Chats/ChatListSearch';\nimport { NoMessages } from '../components/Layout/NoData';\nimport Banner from '../components/Messages/Banner';\nimport MessageInputField from '../components/Messages/MessageInputField';\nimport Message from '../components/Messages/Message';\nimport getUserInfo from '../utils/getUserInfo';\nimport newMsgSound from '../utils/newMessageSound';\nimport cookie from 'js-cookie';\n\nconst scrollDivToBottom = divRef => divRef.current !== null && divRef.current.scrollIntoView({\n  behaviour: 'smooth'\n});\n\nfunction Messages({\n  chatsData,\n  user\n}) {\n  const {\n    0: chats,\n    1: setChats\n  } = useState(chatsData);\n  const router = useRouter();\n  const socket = useRef();\n  const {\n    0: connectedUsers,\n    1: setConnectedUsers\n  } = useState([]);\n  const {\n    0: messages,\n    1: setMessages\n  } = useState([]);\n  const {\n    0: bannerData,\n    1: setBannerData\n  } = useState({\n    name: '',\n    profilePicUrl: ''\n  });\n  const divRef = useRef(); // This ref is for persisting the state of query string in url throughout re-renders. This ref is the value of query string inside url\n\n  const openChatId = useRef(''); //CONNECTION useEffect\n\n  useEffect(() => {\n    if (!socket.current) {\n      socket.current = io(baseUrl);\n    }\n\n    if (socket.current) {\n      socket.current.emit('join', {\n        userId: user._id\n      });\n      socket.current.on('connectedUsers', ({\n        users\n      }) => {\n        users.length > 0 && setConnectedUsers(users);\n      });\n\n      if (chats.length > 0 && !router.query.message) {\n        router.push(`/messages?message=${chats[0].messagesWith}`, undefined, {\n          shallow: true\n        });\n      }\n    }\n\n    return () => {\n      if (socket.current) {\n        socket.current.emit('disconnect');\n        socket.current.off();\n      }\n    };\n  }, []); // LOAD MESSAGES useEffect\n\n  useEffect(() => {\n    const loadMessages = () => {\n      socket.current.emit('loadMessages', {\n        userId: user._id,\n        messagesWith: router.query.message\n      });\n      socket.current.on('messagesLoaded', async ({\n        chat\n      }) => {\n        setMessages(chat.messages);\n        setBannerData({\n          name: chat.messagesWith.name,\n          profilePicUrl: chat.messagesWith.profilePicUrl\n        });\n        openChatId.current = chat.messagesWith._id;\n        divRef.current && scrollDivToBottom(divRef);\n      });\n      socket.current.on('noChatFound', async () => {\n        const {\n          name,\n          profilePicUrl\n        } = await getUserInfo(router.query.message);\n        setBannerData({\n          name,\n          profilePicUrl\n        });\n        setMessages([]);\n        openChatId.current = router.query.message;\n      });\n    };\n\n    if (socket.current && router.query.message) loadMessages();\n  }, [router.query.message]);\n\n  const sendMsg = msg => {\n    if (socket.current) {\n      socket.current.emit('sendNewMsg', {\n        userId: user._id,\n        msgSendToUserId: openChatId.current,\n        msg\n      });\n    }\n  }; // Confirming msg is sent and receving the messages useEffect\n\n\n  useEffect(() => {\n    if (socket.current) {\n      socket.current.on('msgSent', ({\n        newMsg\n      }) => {\n        if (newMsg.receiver === openChatId.current) {\n          setMessages(prev => [...prev, newMsg]);\n          setChats(prev => {\n            const previousChat = prev.find(chat => chat.messagesWith === newMsg.receiver);\n            previousChat.lastMessage = newMsg.msg;\n            previousChat.date = newMsg.date;\n            return [...prev];\n          });\n        }\n      });\n      socket.current.on('newMsgReceived', async ({\n        newMsg\n      }) => {\n        let senderName; // WHEN CHAT WITH SENDER IS CURRENTLY OPENED INSIDE YOUR BROWSER\n\n        if (newMsg.sender === openChatId.current) {\n          setMessages(prev => [...prev, newMsg]);\n          setChats(prev => {\n            const previousChat = prev.find(chat => chat.messagesWith === newMsg.sender);\n            previousChat.lastMessage = newMsg.msg;\n            previousChat.date = newMsg.date;\n            senderName = previousChat.name;\n            return [...prev];\n          });\n        } //\n        else {\n            const ifPreviouslyMessaged = chats.filter(chat => chat.messagesWith === newMsg.sender).length > 0;\n\n            if (ifPreviouslyMessaged) {\n              setChats(prev => {\n                const previousChat = prev.find(chat => chat.messagesWith === newMsg.sender);\n                previousChat.lastMessage = newMsg.msg;\n                previousChat.date = newMsg.date;\n                senderName = previousChat.name;\n                return [previousChat, ...prev.filter(chat => chat.messagesWith !== newMsg.sender)];\n              });\n            } //IF NO PREVIOUS CHAT WITH THE SENDER\n            else {\n                const {\n                  name,\n                  profilePicUrl\n                } = await getUserInfo(newMsg.sender);\n                senderName = name;\n                const newChat = {\n                  messagesWith: newMsg.sender,\n                  name,\n                  profilePicUrl,\n                  lastMessage: newMsg.msg,\n                  date: newMsg.date\n                };\n                setChats(prev => [newChat, ...prev]);\n              }\n          }\n\n        newMsgSound(senderName);\n      });\n    }\n  }, []);\n  useEffect(() => {\n    messages.length > 0 && scrollDivToBottom(divRef);\n  }, [messages]);\n\n  const deleteMsg = messageId => {\n    if (socket.current) {\n      socket.current.emit('deleteMsg', {\n        userId: user._id,\n        messagesWith: openChatId.current,\n        messageId\n      });\n      socket.current.on('msgDeleted', () => {\n        setMessages(prev => prev.filter(message => message._id !== messageId));\n      });\n    }\n  };\n\n  const deleteChat = async messagesWith => {\n    try {\n      await axios.delete(`${baseUrl}/api/chats/${messagesWith}`, {\n        headers: {\n          Authorization: cookie.get('token')\n        }\n      });\n      setChats(prev => prev.filter(chat => chat.messagesWith !== messagesWith));\n      router.push('/messages', undefined, {\n        shallow: true\n      });\n    } catch (error) {\n      alert('Error deleting chat');\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Segment, {\n    padded: true,\n    basic: true,\n    size: \"large\",\n    style: {\n      marginTop: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }\n  }, __jsx(Header, {\n    icon: \"home\",\n    content: \"Go Back!\",\n    onClick: () => router.push('/'),\n    style: {\n      cursor: 'pointer'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 9\n    }\n  }), __jsx(Divider, {\n    hidden: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    style: {\n      marginBottom: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    }\n  }, __jsx(ChatListSearch, {\n    chats: chats,\n    setChats: setChats,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 11\n    }\n  })), chats.length > 0 ? __jsx(React.Fragment, null, __jsx(Grid, {\n    stackable: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 13\n    }\n  }, __jsx(Grid.Column, {\n    width: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 15\n    }\n  }, __jsx(Comment.Group, {\n    size: \"big\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 17\n    }\n  }, __jsx(Segment, {\n    raised: true,\n    style: {\n      overflow: 'auto',\n      maxHeight: '32rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 19\n    }\n  }, chats.map((chat, i) => __jsx(Chat, {\n    key: i,\n    chat: chat,\n    connectedUsers: connectedUsers,\n    deleteChat: deleteChat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 23\n    }\n  }))))), __jsx(Grid.Column, {\n    width: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 15\n    }\n  }, router.query.message && __jsx(React.Fragment, null, __jsx(\"div\", {\n    style: {\n      overflow: 'auto',\n      overflowX: 'hidden',\n      maxHeight: '35rem',\n      height: '35rem',\n      backgroundColor: 'whitesmoke'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 21\n    }\n  }, __jsx(\"div\", {\n    style: {\n      position: 'sticky',\n      top: '0'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 23\n    }\n  }, __jsx(Banner, {\n    bannerData: bannerData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 25\n    }\n  })), messages.length > 0 && messages.map((message, i) => __jsx(Message, {\n    divRef: divRef,\n    key: i,\n    bannerProfilePic: bannerData.profilePicUrl,\n    message: message,\n    user: user,\n    deleteMsg: deleteMsg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 27\n    }\n  }))), __jsx(MessageInputField, {\n    sendMsg: sendMsg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 21\n    }\n  }))))) : __jsx(NoMessages, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 11\n    }\n  })));\n}\n\nMessages.getInitialProps = async ctx => {\n  try {\n    const {\n      token\n    } = parseCookies(ctx);\n    const res = await axios.get(`${baseUrl}/api/chats`, {\n      headers: {\n        Authorization: token\n      }\n    });\n    return {\n      chatsData: res.data\n    };\n  } catch (error) {\n    return {\n      errorLoading: true\n    };\n  }\n};\n\nexport default Messages;","map":{"version":3,"sources":["C:/Users/User/Desktop/REACT/mernChat/pages/messages.js"],"names":["React","useEffect","useRef","useState","io","axios","baseUrl","parseCookies","useRouter","Segment","Header","Divider","Comment","Grid","Chat","ChatListSearch","NoMessages","Banner","MessageInputField","Message","getUserInfo","newMsgSound","cookie","scrollDivToBottom","divRef","current","scrollIntoView","behaviour","Messages","chatsData","user","chats","setChats","router","socket","connectedUsers","setConnectedUsers","messages","setMessages","bannerData","setBannerData","name","profilePicUrl","openChatId","emit","userId","_id","on","users","length","query","message","push","messagesWith","undefined","shallow","off","loadMessages","chat","sendMsg","msg","msgSendToUserId","newMsg","receiver","prev","previousChat","find","lastMessage","date","senderName","sender","ifPreviouslyMessaged","filter","newChat","deleteMsg","messageId","deleteChat","delete","headers","Authorization","get","error","alert","marginTop","cursor","marginBottom","overflow","maxHeight","map","i","overflowX","height","backgroundColor","position","top","getInitialProps","ctx","token","res","data","errorLoading"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport io from 'socket.io-client';\r\nimport axios from 'axios';\r\nimport baseUrl from '../utils/baseUrl';\r\nimport { parseCookies } from 'nookies';\r\nimport { useRouter } from 'next/router';\r\nimport { Segment, Header, Divider, Comment, Grid } from 'semantic-ui-react';\r\nimport Chat from '../components/Chats/Chat';\r\nimport ChatListSearch from '../components/Chats/ChatListSearch';\r\nimport { NoMessages } from '../components/Layout/NoData';\r\nimport Banner from '../components/Messages/Banner';\r\nimport MessageInputField from '../components/Messages/MessageInputField';\r\nimport Message from '../components/Messages/Message';\r\nimport getUserInfo from '../utils/getUserInfo';\r\nimport newMsgSound from '../utils/newMessageSound';\r\nimport cookie from 'js-cookie';\r\n\r\nconst scrollDivToBottom = (divRef) =>\r\n  divRef.current !== null &&\r\n  divRef.current.scrollIntoView({ behaviour: 'smooth' });\r\n\r\nfunction Messages({ chatsData, user }) {\r\n  const [chats, setChats] = useState(chatsData);\r\n  const router = useRouter();\r\n\r\n  const socket = useRef();\r\n  const [connectedUsers, setConnectedUsers] = useState([]);\r\n\r\n  const [messages, setMessages] = useState([]);\r\n  const [bannerData, setBannerData] = useState({ name: '', profilePicUrl: '' });\r\n\r\n  const divRef = useRef();\r\n\r\n  // This ref is for persisting the state of query string in url throughout re-renders. This ref is the value of query string inside url\r\n  const openChatId = useRef('');\r\n\r\n  //CONNECTION useEffect\r\n  useEffect(() => {\r\n    if (!socket.current) {\r\n      socket.current = io(baseUrl);\r\n    }\r\n\r\n    if (socket.current) {\r\n      socket.current.emit('join', { userId: user._id });\r\n\r\n      socket.current.on('connectedUsers', ({ users }) => {\r\n        users.length > 0 && setConnectedUsers(users);\r\n      });\r\n\r\n      if (chats.length > 0 && !router.query.message) {\r\n        router.push(`/messages?message=${chats[0].messagesWith}`, undefined, {\r\n          shallow: true,\r\n        });\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      if (socket.current) {\r\n        socket.current.emit('disconnect');\r\n        socket.current.off();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // LOAD MESSAGES useEffect\r\n  useEffect(() => {\r\n    const loadMessages = () => {\r\n      socket.current.emit('loadMessages', {\r\n        userId: user._id,\r\n        messagesWith: router.query.message,\r\n      });\r\n\r\n      socket.current.on('messagesLoaded', async ({ chat }) => {\r\n        setMessages(chat.messages);\r\n        setBannerData({\r\n          name: chat.messagesWith.name,\r\n          profilePicUrl: chat.messagesWith.profilePicUrl,\r\n        });\r\n\r\n        openChatId.current = chat.messagesWith._id;\r\n        divRef.current && scrollDivToBottom(divRef);\r\n      });\r\n\r\n      socket.current.on('noChatFound', async () => {\r\n        const { name, profilePicUrl } = await getUserInfo(router.query.message);\r\n\r\n        setBannerData({ name, profilePicUrl });\r\n        setMessages([]);\r\n\r\n        openChatId.current = router.query.message;\r\n      });\r\n    };\r\n\r\n    if (socket.current && router.query.message) loadMessages();\r\n  }, [router.query.message]);\r\n\r\n  const sendMsg = (msg) => {\r\n    if (socket.current) {\r\n      socket.current.emit('sendNewMsg', {\r\n        userId: user._id,\r\n        msgSendToUserId: openChatId.current,\r\n        msg,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Confirming msg is sent and receving the messages useEffect\r\n  useEffect(() => {\r\n    if (socket.current) {\r\n      socket.current.on('msgSent', ({ newMsg }) => {\r\n        if (newMsg.receiver === openChatId.current) {\r\n          setMessages((prev) => [...prev, newMsg]);\r\n\r\n          setChats((prev) => {\r\n            const previousChat = prev.find(\r\n              (chat) => chat.messagesWith === newMsg.receiver\r\n            );\r\n            previousChat.lastMessage = newMsg.msg;\r\n            previousChat.date = newMsg.date;\r\n\r\n            return [...prev];\r\n          });\r\n        }\r\n      });\r\n\r\n      socket.current.on('newMsgReceived', async ({ newMsg }) => {\r\n        let senderName;\r\n\r\n        // WHEN CHAT WITH SENDER IS CURRENTLY OPENED INSIDE YOUR BROWSER\r\n        if (newMsg.sender === openChatId.current) {\r\n          setMessages((prev) => [...prev, newMsg]);\r\n\r\n          setChats((prev) => {\r\n            const previousChat = prev.find(\r\n              (chat) => chat.messagesWith === newMsg.sender\r\n            );\r\n            previousChat.lastMessage = newMsg.msg;\r\n            previousChat.date = newMsg.date;\r\n\r\n            senderName = previousChat.name;\r\n\r\n            return [...prev];\r\n          });\r\n        }\r\n        //\r\n        else {\r\n          const ifPreviouslyMessaged =\r\n            chats.filter((chat) => chat.messagesWith === newMsg.sender).length >\r\n            0;\r\n\r\n          if (ifPreviouslyMessaged) {\r\n            setChats((prev) => {\r\n              const previousChat = prev.find(\r\n                (chat) => chat.messagesWith === newMsg.sender\r\n              );\r\n              previousChat.lastMessage = newMsg.msg;\r\n              previousChat.date = newMsg.date;\r\n\r\n              senderName = previousChat.name;\r\n\r\n              return [\r\n                previousChat,\r\n                ...prev.filter((chat) => chat.messagesWith !== newMsg.sender),\r\n              ];\r\n            });\r\n          }\r\n\r\n          //IF NO PREVIOUS CHAT WITH THE SENDER\r\n          else {\r\n            const { name, profilePicUrl } = await getUserInfo(newMsg.sender);\r\n            senderName = name;\r\n\r\n            const newChat = {\r\n              messagesWith: newMsg.sender,\r\n              name,\r\n              profilePicUrl,\r\n              lastMessage: newMsg.msg,\r\n              date: newMsg.date,\r\n            };\r\n            setChats((prev) => [newChat, ...prev]);\r\n          }\r\n        }\r\n\r\n        newMsgSound(senderName);\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    messages.length > 0 && scrollDivToBottom(divRef);\r\n  }, [messages]);\r\n\r\n  const deleteMsg = (messageId) => {\r\n    if (socket.current) {\r\n      socket.current.emit('deleteMsg', {\r\n        userId: user._id,\r\n        messagesWith: openChatId.current,\r\n        messageId,\r\n      });\r\n\r\n      socket.current.on('msgDeleted', () => {\r\n        setMessages((prev) =>\r\n          prev.filter((message) => message._id !== messageId)\r\n        );\r\n      });\r\n    }\r\n  };\r\n\r\n  const deleteChat = async (messagesWith) => {\r\n    try {\r\n      await axios.delete(`${baseUrl}/api/chats/${messagesWith}`, {\r\n        headers: { Authorization: cookie.get('token') },\r\n      });\r\n\r\n      setChats((prev) =>\r\n        prev.filter((chat) => chat.messagesWith !== messagesWith)\r\n      );\r\n      router.push('/messages', undefined, { shallow: true });\r\n    } catch (error) {\r\n      alert('Error deleting chat');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Segment padded basic size=\"large\" style={{ marginTop: '5px' }}>\r\n        <Header\r\n          icon=\"home\"\r\n          content=\"Go Back!\"\r\n          onClick={() => router.push('/')}\r\n          style={{ cursor: 'pointer' }}\r\n        />\r\n        <Divider hidden />\r\n\r\n        <div style={{ marginBottom: '10px' }}>\r\n          <ChatListSearch chats={chats} setChats={setChats} />\r\n        </div>\r\n\r\n        {chats.length > 0 ? (\r\n          <>\r\n            <Grid stackable>\r\n              <Grid.Column width={4}>\r\n                <Comment.Group size=\"big\">\r\n                  <Segment\r\n                    raised\r\n                    style={{ overflow: 'auto', maxHeight: '32rem' }}\r\n                  >\r\n                    {chats.map((chat, i) => (\r\n                      <Chat\r\n                        key={i}\r\n                        chat={chat}\r\n                        connectedUsers={connectedUsers}\r\n                        deleteChat={deleteChat}\r\n                      />\r\n                    ))}\r\n                  </Segment>\r\n                </Comment.Group>\r\n              </Grid.Column>\r\n\r\n              <Grid.Column width={12}>\r\n                {router.query.message && (\r\n                  <>\r\n                    <div\r\n                      style={{\r\n                        overflow: 'auto',\r\n                        overflowX: 'hidden',\r\n                        maxHeight: '35rem',\r\n                        height: '35rem',\r\n                        backgroundColor: 'whitesmoke',\r\n                      }}\r\n                    >\r\n                      <div style={{ position: 'sticky', top: '0' }}>\r\n                        <Banner bannerData={bannerData} />\r\n                      </div>\r\n\r\n                      {messages.length > 0 &&\r\n                        messages.map((message, i) => (\r\n                          <Message\r\n                            divRef={divRef}\r\n                            key={i}\r\n                            bannerProfilePic={bannerData.profilePicUrl}\r\n                            message={message}\r\n                            user={user}\r\n                            deleteMsg={deleteMsg}\r\n                          />\r\n                        ))}\r\n                    </div>\r\n\r\n                    <MessageInputField sendMsg={sendMsg} />\r\n                  </>\r\n                )}\r\n              </Grid.Column>\r\n            </Grid>\r\n          </>\r\n        ) : (\r\n          <NoMessages />\r\n        )}\r\n      </Segment>\r\n    </>\r\n  );\r\n}\r\n\r\nMessages.getInitialProps = async (ctx) => {\r\n  try {\r\n    const { token } = parseCookies(ctx);\r\n\r\n    const res = await axios.get(`${baseUrl}/api/chats`, {\r\n      headers: { Authorization: token },\r\n    });\r\n\r\n    return { chatsData: res.data };\r\n  } catch (error) {\r\n    return { errorLoading: true };\r\n  }\r\n};\r\n\r\nexport default Messages;\r\n"]},"metadata":{},"sourceType":"module"}