{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\ADVANCED REACT\\\\mernChat\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport baseUrl from '../utils/baseUrl';\nimport CreatePost from '../components/Post/CreatePost';\nimport CardPost from '../components/Post/CardPost';\nimport { Segment } from 'semantic-ui-react';\nimport { parseCookies } from 'nookies';\nimport { NoPosts } from '../components/Layout/NoData';\nimport cookie from 'js-cookie';\n\nfunction Index({\n  user,\n  postsData,\n  errorLoading\n}) {\n  const {\n    0: posts,\n    1: setPosts\n  } = useState(postsData || []);\n  const {\n    0: showToastr,\n    1: setShowToastr\n  } = useState(false);\n  const {\n    0: hasMore,\n    1: setHasMore\n  } = useState(true);\n  const {\n    0: pageNumber,\n    1: setPageNumber\n  } = useState(2);\n  useEffect(() => {\n    document.title = `Welcome, ${user.name.split(' ')[0]}`;\n  }, []);\n  useEffect(() => {\n    showToastr && setTimeout(() => setShowToastr(false), 3000);\n  }, [showToastr]);\n\n  const fetchDataOnScroll = async () => {\n    try {\n      const res = await axios.get(`${baseUrl}/api/posts`, {\n        headers: {\n          Authorization: cookie.get('token')\n        },\n        params: {\n          pageNumber\n        }\n      });\n      if (res.data.length === 0) setHasMore(false);\n      setPosts(prev => [...prev, ...res.data]);\n      setPageNumber(prev => prev + 1);\n    } catch (error) {\n      alert('Error fetching Posts');\n    }\n  };\n\n  if (posts.length === 0 || errorLoading) return __jsx(NoPosts, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 50\n    }\n  });\n  return __jsx(React.Fragment, null, __jsx(Segment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, __jsx(CreatePost, {\n    user: user,\n    setPosts: setPosts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }), posts.map(post => __jsx(CardPost, {\n    key: post._id,\n    post: post,\n    user: user,\n    setPosts: setPosts,\n    setShowToastr: setShowToastr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }))));\n}\n\nIndex.getInitialProps = async ctx => {\n  try {\n    const {\n      token\n    } = parseCookies(ctx);\n    const res = await axios.get(`${baseUrl}/api/posts`, {\n      headers: {\n        Authorization: token\n      },\n      params: {\n        pageNumber: 1\n      }\n    });\n    return {\n      postsData: res.data\n    };\n  } catch (error) {\n    return {\n      errorLoading: true\n    };\n  }\n};\n\nexport default Index;","map":{"version":3,"sources":["C:/Users/User/Desktop/ADVANCED REACT/mernChat/pages/index.js"],"names":["React","useEffect","useState","axios","baseUrl","CreatePost","CardPost","Segment","parseCookies","NoPosts","cookie","Index","user","postsData","errorLoading","posts","setPosts","showToastr","setShowToastr","hasMore","setHasMore","pageNumber","setPageNumber","document","title","name","split","setTimeout","fetchDataOnScroll","res","get","headers","Authorization","params","data","length","prev","error","alert","map","post","_id","getInitialProps","ctx","token"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport baseUrl from '../utils/baseUrl';\r\nimport CreatePost from '../components/Post/CreatePost';\r\nimport CardPost from '../components/Post/CardPost';\r\nimport { Segment } from 'semantic-ui-react';\r\nimport { parseCookies } from 'nookies';\r\nimport { NoPosts } from '../components/Layout/NoData';\r\n\r\nimport cookie from 'js-cookie';\r\n\r\nfunction Index({ user, postsData, errorLoading }) {\r\n  const [posts, setPosts] = useState(postsData || []);\r\n  const [showToastr, setShowToastr] = useState(false);\r\n  const [hasMore, setHasMore] = useState(true);\r\n\r\n  const [pageNumber, setPageNumber] = useState(2);\r\n\r\n  useEffect(() => {\r\n    document.title = `Welcome, ${user.name.split(' ')[0]}`;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    showToastr && setTimeout(() => setShowToastr(false), 3000);\r\n  }, [showToastr]);\r\n\r\n  const fetchDataOnScroll = async () => {\r\n    try {\r\n      const res = await axios.get(`${baseUrl}/api/posts`, {\r\n        headers: { Authorization: cookie.get('token') },\r\n        params: { pageNumber },\r\n      });\r\n\r\n      if (res.data.length === 0) setHasMore(false);\r\n\r\n      setPosts((prev) => [...prev, ...res.data]);\r\n      setPageNumber((prev) => prev + 1);\r\n    } catch (error) {\r\n      alert('Error fetching Posts');\r\n    }\r\n  };\r\n\r\n  if (posts.length === 0 || errorLoading) return <NoPosts />;\r\n\r\n  return (\r\n    <>\r\n      <Segment>\r\n        <CreatePost user={user} setPosts={setPosts} />\r\n\r\n        {posts.map((post) => (\r\n          <CardPost\r\n            key={post._id}\r\n            post={post}\r\n            user={user}\r\n            setPosts={setPosts}\r\n            setShowToastr={setShowToastr}\r\n          />\r\n        ))}\r\n      </Segment>\r\n    </>\r\n  );\r\n}\r\n\r\nIndex.getInitialProps = async (ctx) => {\r\n  try {\r\n    const { token } = parseCookies(ctx);\r\n\r\n    const res = await axios.get(`${baseUrl}/api/posts`, {\r\n      headers: { Authorization: token },\r\n      params: { pageNumber: 1 },\r\n    });\r\n\r\n    return { postsData: res.data };\r\n  } catch (error) {\r\n    return { errorLoading: true };\r\n  }\r\n};\r\n\r\nexport default Index;\r\n"]},"metadata":{},"sourceType":"module"}